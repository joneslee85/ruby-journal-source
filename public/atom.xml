<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruby Journal]]></title>
  <link href="http://ruby-journal.com/atom.xml" rel="self"/>
  <link href="http://ruby-journal.com/"/>
  <updated>2015-04-27T01:24:23+10:00</updated>
  <id>http://ruby-journal.com/</id>
  <author>
    <name><![CDATA[Trung LÃª]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to create images/files upload form in Lotus Framework?]]></title>
    <link href="http://ruby-journal.com/how-to-create-images-slash-files-upload-form-in-lotus-framework/"/>
    <updated>2015-04-13T09:25:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-create-images-slash-files-upload-form-in-lotus-framework</id>
    <content type="html"><![CDATA[
<p>In today tutorial, I will show you how to create an image uploader with Lotus.</p>

<p>You will learn:</p>

<ul>
  <li>Create file input and multipart HTML form</li>
  <li>Process uploaded file request</li>
  <li>Good practices on making your code nice and clean</li>
</ul>

<!--more-->

<h2 id="prerequisites">Prerequisites</h2>

<p>Lotus is progressing so quickly that I am afraid this post might get out-of-date
quickly. I will try my best to keep it up-to-date as much as I can. For the time
being, please ensure you meet following requirements:</p>

<ul>
  <li>Lotus 0.3.1</li>
</ul>

<h2 id="initial-setup">Initial Setup</h2>

<p>Generate a new demo app:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lotus new demo
</span><span class="line">cd demo</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above command will generate a new lotus container with one web app that
resides in <code>apps/web</code>.</p>

<h2 id="create-web-form">Create Web Form</h2>

<h3 id="make-new-controller-actions">Make new controller actions</h3>

<p>I create a new RESTful controller action</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec lotus generate action web images#new</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>which would create a new <code>Web::Controllers::Images</code> controller where we will
put our form for the image resource.</p>

<p>We also need <code>images#create</code> controller to handle submitted form:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec lotus generate action web images#create</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By default, lotus action generator generates a GET route to <code>images#create</code>. We
tweak this route to POST by modifying the <code>apps/web/config/routes.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">get</span> <span class="s1">&#39;/images&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;images#new&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># from</span>
</span><span class="line"><span class="c1"># get &#39;/images&#39;, to: &#39;images#create&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># to</span>
</span><span class="line"><span class="n">post</span> <span class="s1">&#39;/images&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;images#create&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Even better, we can turn our route to be RESTful resource by getting rid of
our 2 existing routes and replace them with one line route:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">resources</span> <span class="ss">:images</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let&#8217;s double-check before moving on by command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">lotus</span> <span class="n">routes</span>
</span><span class="line"><span class="n">new_images</span> <span class="no">GET</span><span class="p">,</span> <span class="no">HEAD</span>  <span class="sr">/images/ne</span><span class="n">w</span>  <span class="ss">Web</span><span class="p">:</span><span class="ss">:Controllers</span><span class="o">::</span><span class="ss">Images</span><span class="p">:</span><span class="ss">:New</span>
</span><span class="line">    <span class="n">images</span> <span class="no">POST</span>       <span class="sr">/images      Web::Controllers::Images::Create</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The output above indicates that our app now has 2 routes that we wanted :).</p>

<p>Besides, we should also clean up the view part of create action:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">rm</span> <span class="n">apps</span><span class="o">/</span><span class="n">web</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="n">create</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span>
</span><span class="line"><span class="n">rm</span> <span class="n">apps</span><span class="o">/</span><span class="n">web</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="n">create</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="create-the-upload-form-html-template">Create the upload form HTML template</h3>

<p>We add our HTML form by modifying <code>apps/web/templates/images/new.html.erb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">&lt;</span><span class="n">form</span> <span class="nb">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span> <span class="n">action</span><span class="o">=</span><span class="s2">&quot;&lt;%= Web::Routes.url(:images) %&gt;&quot;</span> <span class="n">enctype</span><span class="o">=</span><span class="s2">&quot;multipart/form-data&quot;</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;file&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;image&quot;</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;image&quot;</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;Upload&quot;</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="sr">/form&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please pay attention that our <code>form</code> uses POST method with action attribute points to
the <code>images#create</code> action and encryption type is <code>multipart/form-data</code>. The last
option tells Lotus that we are going to take in non-text or binary submitted data.
Additionaly, we have one input field of type file so user could choose file to upload.</p>

<p>Let&#8217;s give it a check, start the server first with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">lotus</span> <span class="n">server</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and browser <code>http://localhost:2300/images/new</code> and you see our new form.</p>

<h2 id="refactor-upload-form-with-lotus-helpers-optional">Refactor upload form with lotus helpers (optional)</h2>

<p>While we are on this template layer, I&#8217;d like to show you how to create a template
helper for this upload form. Unlike Rails, Lotus has a clear separation between
the controller and the presenter. In other words, Lotus&#8217;s controller does not
render HTML template, but taking parsed request parameters then calling to
model for processing and delgate the presentation to View class (presenter class).</p>

<p>We create our upload form in <code>Web::Views:Images</code> class. We modify <code>apps/web/views/images/new.rb</code>
file with following content:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Web::Views::Images</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">New</span>
</span><span class="line">    <span class="kp">include</span> <span class="ss">Web</span><span class="p">:</span><span class="ss">:View</span>
</span><span class="line">    <span class="kp">include</span> <span class="ss">Lotus</span><span class="p">:</span><span class="ss">:Helpers</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">upload_form</span>
</span><span class="line">      <span class="n">html</span><span class="o">.</span><span class="n">form</span><span class="p">(</span><span class="nb">method</span><span class="p">:</span> <span class="s1">&#39;post&#39;</span><span class="p">,</span> <span class="ss">action</span><span class="p">:</span> <span class="n">create_images_url</span><span class="p">,</span> <span class="ss">enctype</span><span class="p">:</span> <span class="s1">&#39;multipart/form-data&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">        <span class="n">input</span><span class="p">(</span><span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;file&#39;</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;image&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">input</span><span class="p">(</span><span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;submit&#39;</span><span class="p">,</span> <span class="ss">value</span><span class="p">:</span> <span class="s1">&#39;Upoad&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="kp">private</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">create_images_url</span>
</span><span class="line">      <span class="ss">Web</span><span class="p">:</span><span class="ss">:Routes</span><span class="o">.</span><span class="n">url</span><span class="p">(</span><span class="ss">:images</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The example codes above indicates the inclusion of <code>Lotus::Helpers</code> of which <code>html</code>
method that we used in <code>Web::Views::Images#upload_form</code>. Lotus makes writing
helpers simple, users don&#8217;t have to deal with string concatenation like Rails.
And I think you can work out how to use Helpers on yourself.</p>

<p>Please make sure we update our template to use our new presenter method, by
modifying <code>apps/web/templates/images/new.html.erb</code> file with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">&lt;%=</span> <span class="n">upload_form</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please be noted that future version will likely introduce <code>form_for</code> method
for convenience.</p>

<h3 id="handle-submitted-payload-in-controller-action">Handle submitted payload in controller action</h3>

<p>The last part of the tutorial is to handle the submitted image in controller.</p>

<p>We modify our <code>Web::Controllers::Images::Create</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Web::Controllers::Images</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Create</span>
</span><span class="line">    <span class="kp">include</span> <span class="ss">Web</span><span class="p">:</span><span class="ss">:Action</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class="line">      <span class="n">dest_dir</span> <span class="o">=</span> <span class="ss">Web</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;public/uploads&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="n">dest_dir</span><span class="p">)</span>
</span><span class="line">      <span class="n">tempfile</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="s1">&#39;image&#39;</span><span class="o">][</span><span class="s1">&#39;tempfile&#39;</span><span class="o">]</span>
</span><span class="line">      <span class="n">filename</span> <span class="o">=</span> <span class="n">dest_dir</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="s1">&#39;image&#39;</span><span class="o">][</span><span class="s1">&#39;filename&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line">      <span class="k">begin</span>
</span><span class="line">        <span class="no">FileUtils</span><span class="o">.</span><span class="n">cp</span><span class="p">(</span><span class="n">tempfile</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">        <span class="nb">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2"> has been successfully uploaded.&quot;</span>
</span><span class="line">      <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class="line">        <span class="nb">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s2">&quot;Failed to upload </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2"> due to: </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="k">ensure</span>
</span><span class="line">        <span class="n">tempfile</span><span class="o">.</span><span class="n">close</span>
</span><span class="line">        <span class="n">tempfile</span><span class="o">.</span><span class="n">unlink</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let&#8217;s dive in a bit, as you can see in the above code, <code>params['image']</code> has
the uploaded file (which is now temporarily stored) and the filename. We copy this
temp file to to <code>apps/web/public/uploads</code>. You can see this directory is always
get created with <code>mkdir_p</code> to ensure we always have this folder setup. We could
refactor the code by having this folder created manually by hand and getting rid
of that line. Lastly, it&#8217;s a good practice to clean up tempfile :)</p>

<p>You can give this a test go by using the browser and try to upload file. If nothing
goes wrong, you should see a new page with message filenmas has been successfully
uploaded.</p>

<h2 id="refactor-controller-action-with-interactor-optional">Refactor controller action with interactor (optional)</h2>

<p>We could refactor our controller code to have less intimate knowledge about the
file moving logic by moving those chunks of business domain logics to Service Object.
Fortunately, Lotus offers <a href="https://github.com/lotus/utils/blob/master/lib/lotus/interactor.rb">Lotus::Interactor</a> right out of the box for this scenario.</p>

<p>We create a new folder for our interactor:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">mkdir</span> <span class="n">apps</span><span class="o">/</span><span class="n">web</span><span class="o">/</span><span class="n">interactors</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And tell <code>Web::Application</code> to load this path by modifying <code>apps/web/application.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">load_paths</span> <span class="o">&lt;&lt;</span> <span class="o">[</span>
</span><span class="line">  <span class="s1">&#39;controllers&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="s1">&#39;views&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="s1">&#39;interactors&#39;</span> <span class="c1"># &lt;= we add this new line</span>
</span><span class="line"><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then create our service class at <code>apps/web/interactors/upload_image.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;lotus/interactor&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">UploadImage</span>
</span><span class="line">  <span class="kp">include</span> <span class="ss">Lotus</span><span class="p">:</span><span class="ss">:Interactor</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:tempfile</span><span class="p">,</span> <span class="ss">:filename</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tempfile</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class="line">    <span class="n">dest_dir</span> <span class="o">=</span> <span class="n">get_upload_path</span>
</span><span class="line">    <span class="vi">@tempfile</span> <span class="o">=</span> <span class="n">tempfile</span>
</span><span class="line">    <span class="vi">@filename</span> <span class="o">=</span> <span class="n">dest_dir</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">call</span>
</span><span class="line">    <span class="k">begin</span>
</span><span class="line">      <span class="no">FileUtils</span><span class="o">.</span><span class="n">cp</span><span class="p">(</span><span class="n">tempfile</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="n">filename</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class="line">    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class="line">      <span class="n">e</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="n">error</span> <span class="n">msg</span> <span class="p">}</span>
</span><span class="line">    <span class="k">ensure</span>
</span><span class="line">      <span class="n">tempfile</span><span class="o">.</span><span class="n">close</span>
</span><span class="line">      <span class="n">tempfile</span><span class="o">.</span><span class="n">unlink</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">root</span>
</span><span class="line">    <span class="ss">Web</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">root</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">get_upload_path</span>
</span><span class="line">    <span class="n">dir</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;public/uploads&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="n">dir</span><span class="p">)</span>
</span><span class="line">    <span class="n">dir</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and change our controller to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Web::Controllers::Images</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Create</span>
</span><span class="line">    <span class="kp">include</span> <span class="ss">Web</span><span class="p">:</span><span class="ss">:Action</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class="line">      <span class="n">tempfile</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="s1">&#39;image&#39;</span><span class="o">][</span><span class="s1">&#39;tempfile&#39;</span><span class="o">]</span>
</span><span class="line">      <span class="n">filename</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="s1">&#39;image&#39;</span><span class="o">][</span><span class="s1">&#39;filename&#39;</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">      <span class="n">result</span> <span class="o">=</span> <span class="no">UploadImage</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">tempfile</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">call</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">success?</span>
</span><span class="line">        <span class="nb">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">result</span><span class="o">.</span><span class="n">filename</span><span class="si">}</span><span class="s2"> has been successfully uploaded.&quot;</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="nb">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s2">&quot;Failed to upload </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2"> due to: </span><span class="si">#{</span><span class="n">result</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Interactor returns a result object after calling <code>#call</code>. The result object
will determine the success of the usecase by checking if there is any errors.
If there are any, we tell controller to list them out with result errors.</p>

<p>As you can see, controller now only do params parsing and delegate the responsiblity
to the use case object. This is a beautiful patter that I think Rails should
have by default.</p>

<p>If you pay close attention, you can see that we do not have any codes to
check for the presence of required params. If you are familiar with Rails, you
might think of something similar to Strong Parameters for whitelisting params
and having Service class check for the presence. With Lotus, you could easily
do that within your controller:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Web::Controllers::Images</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Create</span>
</span><span class="line">    <span class="kp">include</span> <span class="ss">Web</span><span class="p">:</span><span class="ss">:Action</span>
</span><span class="line">
</span><span class="line">    <span class="n">params</span> <span class="k">do</span>
</span><span class="line">      <span class="n">param</span> <span class="ss">:image</span> <span class="k">do</span>
</span><span class="line">        <span class="n">param</span> <span class="ss">:tempfile</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class="line">        <span class="n">param</span> <span class="ss">:filename</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class="line">      <span class="n">tempfile</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="s1">&#39;image&#39;</span><span class="o">][</span><span class="s1">&#39;tempfile&#39;</span><span class="o">]</span>
</span><span class="line">      <span class="n">filename</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="s1">&#39;image&#39;</span><span class="o">][</span><span class="s1">&#39;filename&#39;</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">      <span class="n">result</span> <span class="o">=</span> <span class="no">UploadImage</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">tempfile</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">call</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">success?</span>
</span><span class="line">        <span class="nb">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">result</span><span class="o">.</span><span class="n">filename</span><span class="si">}</span><span class="s2"> has been successfully uploaded.&quot;</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="nb">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s2">&quot;Failed to upload </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2"> due to: </span><span class="si">#{</span><span class="n">result</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see in the above code, we added new <code>params</code> block. We tell Lotus to whitelist
the nested params <code>:image</code> as well as check for presence of <code>:tempfile</code> and <code>:filename</code>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope you are now familiar with the process uploading file in Lotus. Here is
few key points that you should be remember:</p>

<ul>
  <li>Create upload HTML form with POST type and <code>enctype="multipart/form-data"</code></li>
  <li>Controller access to upload files via <code>params['image']</code></li>
  <li>Business Logic can be extracted to Interactor class</li>
  <li>Params whitelisting/validation can be done within controller action</li>
</ul>

<p>If you have any question, please do not hesitate to ask.</p>

<p>The sample code can be found at <a href="https://github.com/ruby-journal/lotus-file-upload-demo">github.com/ruby-journal/lotus-file-upload-demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to consolidate module functions?]]></title>
    <link href="http://ruby-journal.com/ruby/what-is-module-function/"/>
    <updated>2015-04-08T09:22:00+10:00</updated>
    <id>http://ruby-journal.com/ruby/what-is-module-function</id>
    <content type="html"><![CDATA[
<p>If you have touched module before, you would know that function can be called
with module as receiver or as instance method when mixed in class. Today I am
going to show you a nitfy trick to consolidate your module function so it can
be used for both purposes at same time by using <code>Module#module_function</code>.</p>

<!--more-->

<h2 id="concept">Concept</h2>

<h3 id="instance-functions">Instance functions</h3>

<p>Module functions can be mixed into classes and thus are invoked as instance
methods for the object of that classes. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">MyLibrary</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hello</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Greeter</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">MyLibrary</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Greeter</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span> <span class="c1"># =&gt; Hello world</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="module-functions">Module functions</h3>

<p>Module functions can be invoked with module as receiver. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">MyLibrary</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">hello</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">MyLibrary</span><span class="o">.</span><span class="n">hello</span> <span class="c1"># =&gt; Hello world</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="i-want-both-how">I want both, how?</h3>

<p>Well, you can, here is my ugly version:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">MyLibrary</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">hello</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">hello</span>
</span><span class="line">    <span class="no">MyLibrary</span><span class="o">.</span><span class="n">hello</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see from the code above, we reference <code>hello</code> method to module
function <code>MyLibrary.hello</code>.</p>

<p>It looks duplicating, isn&#8217;t it? Thanks to Ruby, there is an alternative:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">MyLibrary</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hello</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">module_function</span> <span class="ss">:hello</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Greeter</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">MyLibrary</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Greeter</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span> <span class="c1"># =&gt; Hello world</span>
</span><span class="line"><span class="no">MyLibrary</span><span class="o">.</span><span class="n">hello</span> <span class="c1"># =&gt; Hello world</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ruby gives us <code>Module#module_function</code> which takes the method name and automatically
generate the module function that is equivalent to <code>MyLibrary.hello</code> for us.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to add basic authentication into Lotus app]]></title>
    <link href="http://ruby-journal.com/lotusrb/how-to-add-basic-authentication-into-lotus-app/"/>
    <updated>2014-12-24T08:28:00+11:00</updated>
    <id>http://ruby-journal.com/lotusrb/how-to-add-basic-authentication-into-lotus-app</id>
    <content type="html"><![CDATA[
<p>Today Lotus Framework officially release its 0.2.0 milestone with many new features.
One is the standardised container architecture app generator. What does that mean?
That means you could seriously make app with Lotus now.</p>

<p>I know that one of the frequently asked question is how to add basic HTTP authentication
for an app. In this tutorial, I&#8217;ll show you how.</p>

<!--more-->

<h2 id="prequisites">Prequisites</h2>

<ul>
  <li>Lotus 0.2.0</li>
  <li>Understanding of Rack is a plus</li>
</ul>

<h2 id="concept">Concept</h2>

<p>Lotus Framework is based on Rack, so is Rails. Rack is a web protocol spec and also a
gem which provides a minimal and unified interface between webservers. Rack introduces
the concept of middleware stacking, in which many middlewares (each is a Rack app of itself)
are bound together to create a full-stack framework. There are middlewares for anything
you want, from request santization to caching. And suprise Rack also provides middleware
for basic authentication.</p>

<p>Introducing <a href="https://github.com/rack/rack/blob/master/lib/rack/auth/basic.rb">Rack::Auth::Basic</a>.</p>

<p>Before we move on to the implementation, please take caution if you want to implement this
authentication. It is not very secure for production environment because the password is
hardcoded and it does not support multiple-users access authentication.</p>

<h2 id="setup">Setup</h2>

<p>Create a new lotus container:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec lotus new demo</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That&#8217;s it, you are ready to rock!</p>

<h2 id="configuration">Configuration</h2>

<p>By default, Lotus would create for you 1 app, that is <code>Web</code> which resides in <code>apps/web</code>. To put
authentication on our <code>Web</code> application, we add to <code>apps/web/application.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Web</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Lotus</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class="line">    <span class="n">configure</span> <span class="k">do</span>
</span><span class="line">
</span><span class="line">      <span class="c1">#..whatever there already</span>
</span><span class="line">
</span><span class="line">      <span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Auth</span><span class="o">::</span><span class="no">Basic</span><span class="p">,</span> <span class="s2">&quot;Protected Area&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">|</span>
</span><span class="line">        <span class="n">username</span> <span class="o">==</span> <span class="s1">&#39;admin&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">password</span> <span class="o">==</span> <span class="s1">&#39;password&#39;</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see in the example above, we tell Lotus to add <code>Rack::Auth::Basic</code> to existing Lotus middlewares.
Lotus provides <code>middleware.use</code> DSL which push the middleware to the bottom of the stack. This DSL
is the same to Rails&#8217;s <code>config.middleware.use</code>.</p>

<p>Please be mindful that this Rack middleware is very limited because username and password are stored
in clear text, this could pose great security risk.</p>

<p>To test it, we start server: <code>bundle exec lotus server</code></p>

<p>Browse to <code>http://0.0.0.0:2300</code>, if things are working correctly, you should be prompted with a login dialog.</p>

<p>If you want to put protection only on development environment, you can move the whole code to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Web</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Lotus</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class="line">    <span class="n">configure</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class="line">      <span class="c1">#..whatever there</span>
</span><span class="line">
</span><span class="line">      <span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Auth</span><span class="o">::</span><span class="no">Basic</span><span class="p">,</span> <span class="s2">&quot;Protected Area&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">|</span>
</span><span class="line">        <span class="n">username</span> <span class="o">==</span> <span class="s1">&#39;admin&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">password</span> <span class="o">==</span> <span class="s1">&#39;password&#39;</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now you might be wondering why there is no production environment? It is because the default environment
is production.</p>

<p>I don&#8217;t really like the way we hardcode our password, we could refactor to store the password in ENV variables.
Thanksfully, Lotus comes with dotenv bundled, and ENV variables can be configured in
<code>config/.env</code>, <code>config/.env.development</code> and <code>config/.env.test</code>. We can change our code to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Auth</span><span class="o">::</span><span class="no">Basic</span><span class="p">,</span> <span class="s2">&quot;Protected Area&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">|</span>
</span><span class="line">  <span class="n">username</span> <span class="o">==</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;AUTH_USER&quot;</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">password</span> <span class="o">==</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;AUTH_PASSWORD&quot;</span><span class="o">]</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and set <code>AUTH_USER</code> and <code>AUTH_PASSWORD</code> in <code>config/.env</code> or <code>config/.env.development</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">AUTH_USER</span><span class="o">=</span><span class="s2">&quot;admin&quot;</span>
</span><span class="line"><span class="no">AUTH_PASSWORD</span><span class="o">=</span><span class="s2">&quot;password&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>Lotus is based on Rack and can leverage all mighty power of Rack. By inserting <code>Rack::Auth::Basic</code> into
Lotus middleware stack, we could easily implement a basic HTTP authentication.</p>

<p>If you have any questions, please leave it the comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The difference between ActiveRecord scope DSL and class method]]></title>
    <link href="http://ruby-journal.com/rails/the-difference-between-activerecord-scope-dsl-and-class-method/"/>
    <updated>2014-10-27T12:14:00+11:00</updated>
    <id>http://ruby-journal.com/rails/the-difference-between-activerecord-scope-dsl-and-class-method</id>
    <content type="html"><![CDATA[
<p>Now and then I get question from people should they use class method or the
scope DSL for ActiveRecord scope. At first I thought they are the same but
in fact there are minor differences.</p>

<!--more-->

<h2 id="how-to-define-scope">How to define scope?</h2>

<p>There are 2 ways to define ActiveRecord model scope:</p>

<ul>
  <li>scope DSL</li>
  <li>class method</li>
</ul>

<h2 id="simple-example">Simple example</h2>

<p>Let&#8217;s see both of them in action with following example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># DSL</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Taxi</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">scope</span> <span class="ss">:by_driver</span><span class="p">,</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">driver</span><span class="p">)</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="n">driver_id</span><span class="p">:</span> <span class="n">driver</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1"># class method</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Taxi</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">by_driver</span><span class="p">(</span><span class="n">driver</span><span class="p">)</span>
</span><span class="line">    <span class="n">where</span><span class="p">(</span><span class="n">driver_id</span><span class="p">:</span> <span class="n">driver</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Both ways returns us ActiveRelation scope which seems the same. In fact
in this case, they are alike with one minor difference, that is the DSL
version doc comment won&#8217;t be picked up by RDoc.</p>

<h2 id="complex-example">Complex example</h2>

<p>Please be careful if you have a complex scope like below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># DSL</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Driver</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">scope</span> <span class="ss">:by_shift</span><span class="p">,</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">shift</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="n">shift</span> <span class="o">==</span> <span class="s1">&#39;night&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="n">where</span><span class="p">(</span><span class="ss">shift</span><span class="p">:</span> <span class="n">shift</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1"># A wrong or naive version using class method</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Driver</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">by_shift</span><span class="p">(</span><span class="n">shift</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="n">shift</span> <span class="o">==</span> <span class="s1">&#39;night&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="n">where</span><span class="p">(</span><span class="ss">shift</span><span class="p">:</span> <span class="n">shift</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see above, the scope involves condition check and in the DSL
would <code>return</code> if it is night shift. You might be wondering what object
is returned implicitly. For the DSL version, the chain scope is returend,
that is the ActiveRelation object.</p>

<p>I naively copy 1:1 the same implementation of DSL to my class method implementation
and I got <code>nil</code> as returned value instead. This breaks the chain (if we use our scope in combination
with other scopes). The class method must be rewritten as:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Driver</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">by_shift</span><span class="p">(</span><span class="n">shift</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">scoped</span> <span class="k">if</span> <span class="n">shift</span> <span class="o">==</span> <span class="s1">&#39;night&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="n">where</span><span class="p">(</span><span class="ss">shift</span><span class="p">:</span> <span class="n">shift</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please be noted that I returned a <code>scoped</code> which is an anonymous scope. This object
is a ActiveRelation object and would keep the chain intact.</p>

<h2 id="conclusion">Conclusion</h2>

<p>What would you use? I myself prefer class method for I find sugar syntax of Rails (which
is nice) does not add in much value. Yet having said so, I do use DSL from time to time
if the scope is tiny.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to add new column after existing column with MySQL in Rails?]]></title>
    <link href="http://ruby-journal.com/how-to-add-new-column-after-existing-column-with-mysql-in-rails/"/>
    <updated>2014-10-09T15:27:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-add-new-column-after-existing-column-with-mysql-in-rails</id>
    <content type="html"><![CDATA[
<p>By default, SQL <code>ADD COLUMN</code> would add new column to the tail of columns. What if you
want to add a new column and append this new column after an existing column? Read on
and I&#8217;ll show you how to do that with Rails in MySQL</p>

<!--more-->

<h2 id="add-new-column-after-existing-column-in-sql">Add new column after existing column in SQL</h2>

<p>MySQL provides <code>AFTER</code> contrainst for <code>ADD COLUMN</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">mytable</span>
</span><span class="line"><span class="k">ADD</span> <span class="k">COLUMN</span>  <span class="n">new_column</span> <span class="o">&lt;</span><span class="k">type</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">AFTER</span>       <span class="n">existing_column</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The example above tell MySQL to create new <code>new_column</code> after <code>existing_column</code>.</p>

<h2 id="doing-it-with-rails-migration">Doing it with Rails migration</h2>

<p>With Rails, we could use ActiveRecord::Migration helper for the job. Let&#8217;s create
a new migration with content:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">change</span>
</span><span class="line">  <span class="n">add_column</span> <span class="ss">:mytable</span><span class="p">,</span> <span class="ss">:new_column</span><span class="p">,</span> <span class="ss">after</span><span class="p">:</span> <span class="s1">&#39;existing_column&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OR if you prefer the SQL way:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">change</span>
</span><span class="line">  <span class="n">add_column</span> <span class="ss">:mytable</span><span class="p">,</span> <span class="ss">:new_column</span><span class="p">,</span> <span class="s1">&#39;&lt;type&gt; AFTER existing_column&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That&#8217;s all for today folks</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to open/override/monkey-patch a class in Ruby?]]></title>
    <link href="http://ruby-journal.com/how-to-open-slash-override-slash-monkey-patch-a-class-in-ruby/"/>
    <updated>2014-10-09T11:18:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-open-slash-override-slash-monkey-patch-a-class-in-ruby</id>
    <content type="html"><![CDATA[
<p>So you search for how to moneykey-patch a class in Ruby? Read on, I&#8217;ll show you how.</p>

<!--more-->

<h2 id="note">Note</h2>

<p>Ruby is very powerful and flexible. Before I show you how to override a class, I want to
ensure that you understand that monkey-patching is not considered a good practice. It might
be the source of hard to trace bugs.</p>

<h2 id="open-existing-class-by-re-defining-class">Open existing class by re-defining class</h2>

<p>Imagine we have following class:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Greeter</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hello</span>
</span><span class="line">    <span class="s2">&quot;hello world&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can open your existing class easily by re-declaring the class and its methods:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Greeter</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hello</span>
</span><span class="line">    <span class="s2">&quot;hello Uncle!&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>Greeter#hello</code> would be overriden with new message <em>if</em> class <code>Greeter</code> does exist.</p>

<p>If class <code>Greeter</code> has not been defined, then our above code would define a new Greeter class. And
that could lead to side effect if we are not careful.</p>

<h2 id="open-existing-class-with-classeval">Open existing class with class_eval</h2>

<p>Alternatively, Ruby provide <code>class_eval</code> method which would check for the existence of the to-be overriden
class. If the class does exist, the block of code that is parsed to <code>class_eval</code> would be evaluated and
replace the existing methods. So our example above will be:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Greeter</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hello</span>
</span><span class="line">    <span class="s2">&quot;hello WORLD!&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If class does not exist, an NameError exeception will be raised:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">NonExistingGreeter</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hello</span>
</span><span class="line">    <span class="s2">&quot;hello WORLD!&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="c1">#=&gt; NameError: uninitialized constant NonExistingGreeter</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>Be aware of your action before you override a class and I highly recommend you to use <code>class_eval</code> because
it does gives you extra class existence check.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick guide to ActiveSupport::HashWithIndifferentAccess]]></title>
    <link href="http://ruby-journal.com/quick-guide-to-activesupport-hashwithindifferentaccess/"/>
    <updated>2014-10-09T10:49:00+11:00</updated>
    <id>http://ruby-journal.com/quick-guide-to-activesupport-hashwithindifferentaccess</id>
    <content type="html"><![CDATA[
<p>Hash is beautiful. It is one of many things why I love Ruby. As you might have known,
Hash is identified by a key, this key could be either a String or a Symbol. For most
of cases, people tend to go for symbol because it would take up less memory (though it
might come with a side effect that is Symbol is not GC-colletable (Ruby 2.2.0 does clean
it up though)).</p>

<p>There are access usecases that requires our hash key to be interchangable between String and Symbol
key. For example, web application request parameter processing.</p>

<p>We could typecast the key to either String or Symbol but it would soon emerge an
annoying pattern. Instead, with the help of ActiveSupport, you can create a hash with
no differences if accessing using String or Symbol key. Introducing ActiveSupport::HashWithIndifferentAccess.</p>

<!--more-->

<h2 id="basic-hash">Basic Hash</h2>

<p>A String hash is like below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">my_string_hash</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;special_key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;the string value&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Or with Symbol:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">my_symbol_hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:special_key</span> <span class="o">=&gt;</span> <span class="s1">&#39;the symbol value&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please be noted that the key might looks similar but they are different to each other in concept.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">my_mix_hash</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;special_key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;the string value&#39;</span><span class="p">,</span> <span class="ss">:special_key</span> <span class="o">=&gt;</span> <span class="s1">&#39;the symbol value&#39;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">my_mix_hash</span><span class="o">[</span><span class="s1">&#39;special_key&#39;</span><span class="o">]</span>
</span><span class="line"><span class="c1">#=&gt; &#39;the string value&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">my_mix_hash</span><span class="o">[</span><span class="ss">:special_key</span><span class="o">]</span>
</span><span class="line"><span class="c1">#=&gt; &#39;the symbol value&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="the-indifferent-access-hash">The Indifferent Access Hash</h2>

<p>If we want to consolidate two type keys into one, ActviveSupport provides a convenient way to do it:</p>

<p>Ensure you install <code>actives_support</code> gem first:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="n">install</span> <span class="n">activesupport</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Fire up your IRB:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;active_support/core_ext/hash/indifferent_access&#39;</span>
</span><span class="line"><span class="n">my_mix_hash</span> <span class="o">=</span> <span class="no">HashWithIndifferentAccess</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">
</span><span class="line"><span class="n">my_mix_hash</span><span class="o">[</span><span class="s1">&#39;special_key&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;value&#39;</span>
</span><span class="line"><span class="n">my_mix_hash</span><span class="o">[</span><span class="s1">&#39;special_key&#39;</span><span class="o">]</span>
</span><span class="line"><span class="c1"># =&gt; value</span>
</span><span class="line"><span class="n">my_mix_hash</span><span class="o">[</span><span class="ss">:special_key</span><span class="o">]</span>
</span><span class="line"><span class="c1"># =&gt; value</span>
</span><span class="line">
</span><span class="line"><span class="n">my_mix_hash</span><span class="o">[</span><span class="ss">:special_key</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;value&#39;</span>
</span><span class="line"><span class="n">my_mix_hash</span><span class="o">[</span><span class="s1">&#39;special_key&#39;</span><span class="o">]</span>
</span><span class="line"><span class="c1"># =&gt; value</span>
</span><span class="line"><span class="n">my_mix_hash</span><span class="o">[</span><span class="ss">:special_key</span><span class="o">]</span>
</span><span class="line"><span class="c1"># =&gt; value</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see above, our <code>my_mix_hash</code> now both points to same value regardless the type of the key.</p>

<h2 id="application-in-rails">Application in Rails</h2>

<p>You can find traces of HashWithIndifferentAccess in Rails controller, the magical <code>params</code> method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to integrate Sidekiq with ActiveJob]]></title>
    <link href="http://ruby-journal.com/how-to-integrate-sidekiq-with-activejob/"/>
    <updated>2014-10-03T08:39:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-integrate-sidekiq-with-activejob</id>
    <content type="html"><![CDATA[
<p>One of the hot thing in Rails 4.2 is the brand new ActiveJob gem, this gem consolidate
the API for background job gems on the market such as DelayedJob, Resque, etc. Today I
am going to guide you through how to integrate Sidekiq with ActiveJob, and you will learn:</p>

<ul>
  <li>Set up Sidekiq adapter for ActiveJob</li>
  <li>Basic of ActiveJob class</li>
  <li>Advanced usage of multiple queues</li>
  <li>ActiveJob callback</li>
  <li>ActiveJob exception catch</li>
  <li>ActiveJob mailer API</li>
</ul>

<!--more-->

<h2 id="the-concept">The concept</h2>

<p>Before we move into details on implementation, I want to clarify that ActiveJob is not
Sidekiq but Sidekiq can act like ActiveJob. Because ActiveJob does not care how a job
is processed (that is forking processes for eg), it only does job queuing and delegate
job crunching to adapter, that is Sidekiq. However Sidekiq does both, it could act
as job queuer and job processor at same time.</p>

<p>So what&#8217;s so good about ActiveJob then? ActiveJob standardises the API interface for
job queuer. This helps changing from one job backend to the other much easily.</p>

<h2 id="install-rails-42">Install Rails 4.2</h2>

<p>ActiveJob is only available in Rails 4.2 and you need to install the latest version of
4.2.</p>

<p>And in your Gemfile of your app, change the version to</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem 'rails', '4.2.0'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And do the <code>bundle install</code></p>

<h2 id="install-sidekiq">Install Sidekiq</h2>

<p>It is just as simple as append this line to your Gemfile</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem 'sidekiq', '3.2.5'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and fire away <code>bundle install</code></p>

<p>Then we create new config file <code>config/sidekiq.yml</code> for our sidekiq</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">---
</span><span class="line">:concurrency: 25
</span><span class="line">:pidfile: ./tmp/pids/sidekiq.pid
</span><span class="line">:logfile: ./log/sidekiq.log
</span><span class="line">:queues:
</span><span class="line">  - default
</span><span class="line">  - [high_priority, 2]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above config file tell Sidekiq where to store PID and log file.
Plus I also configure Sidekiq to create 2 queues, default and high priority queue.
FYI, the number 2 in high_priority line is the weight of 2, it means
that it will be check twice as often. I&#8217;ll demonstrate how can we delegate our job to
right queue later.</p>

<p>You are free to configure Sidekiq in whatever way you see fit your app.</p>

<p>We can start our sidekiq daemon:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sidekiq -C config/sidekiq.yml</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>if nothing goes wrong, you should see similar output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">2014-10-03T01:23:24.775Z 13918 TID-oxapc5ias INFO: Running in ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin14.0]
</span><span class="line">2014-10-03T01:23:24.775Z 13918 TID-oxapc5ias INFO: See LICENSE and the LGPL-3.0 for licensing details.
</span><span class="line">2014-10-03T01:23:24.776Z 13918 TID-oxapc5ias INFO: Upgrade to Sidekiq Pro for more features and support: http://sidekiq.org/pro
</span><span class="line">2014-10-03T01:23:24.776Z 13918 TID-oxapc5ias INFO: Starting processing, hit Ctrl-C to stop
</span><span class="line">2014-10-03T01:23:24.777Z 13918 TID-oxaphajos DEBUG: {:queues=&gt;["default", "high_priority", "high_priority"], :labels=&gt;[], :concurrency=&gt;25, :require=&gt;".", :environment=&gt;nil, :timeout=&gt;8, :error_handlers=&gt;[#&lt;Sidekiq::ExceptionHandler::Logger:0x007fe76b1cfcc8&gt;], :lifecycle_events=&gt;{:startup=&gt;[], :quiet=&gt;[], :shutdown=&gt;[]}, :verbose=&gt;true, :daemon=&gt;false, :pidfile=&gt;"./tmp/pids/sidekiq.pid", :logfile=&gt;"./log/sidekiq.log", :strict=&gt;false, :config_file=&gt;"config/sidekiq.yml", :tag=&gt;"demo_app"}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That&#8217;s a good, quit out the sidekiq by Ctrl-C and we could run sidekiq in daemon mode by
modifying our <code>config/sidekiq.yml</code> by appending so our file is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">---
</span><span class="line">:concurrency: 25
</span><span class="line">:pidfile: ./tmp/pids/sidekiq.pid
</span><span class="line">:logfile: ./log/sidekiq.log
</span><span class="line">:queues:
</span><span class="line">  - default
</span><span class="line">  - [high_priority, 2]
</span><span class="line">:daemon: true</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let&#8217;s run out sidekiq again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sidekiq -C config/sidekiq.yml
</span><span class="line">
</span><span class="line"># we then can check if it's started correctly
</span><span class="line">$ ps aux | grep sidekiq
</span><span class="line">trung_le        13534  22.6  0.7  2667148 118288   ??  S    10:31am   0:02.62 sidekiq 3.2.5 demo_app [0 of 25 busy]</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="set-up-our-job">Set up our Job</h2>

<p>Let&#8217;s imagine that our job is to run a CSV Importer in background, here is our CSVImporter class:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CsvImporter</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:filepath</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@filepath</span> <span class="o">=</span> <span class="n">filepath</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;Prepare to import </span><span class="si">#{</span><span class="n">filepath</span><span class="si">}</span><span class="s2"> ...&quot;</span>
</span><span class="line">    <span class="c1"># some crunching code</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;Import </span><span class="si">#{</span><span class="n">filepath</span><span class="si">}</span><span class="s2"> completed&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we have our gems installed, we&#8217;ll need to configure ActiveJob to use sidekiq as backend by creating following initializer:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#config/initializers/active_job.rb</span>
</span><span class="line">
</span><span class="line"><span class="ss">ActiveJob</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">queue_adapter</span> <span class="o">=</span> <span class="ss">:sidekiq</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By convention, we place our Job class under <code>app/jobs</code></p>

<p>Here is our uber-cool CSV importing job (I try to make the most boring thing on Earth&#8230;interesting)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># app/jobs/csv_import_job.rb</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">CsvImportJob</span> <span class="o">&lt;</span> <span class="ss">ActiveJob</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">queue_as</span> <span class="ss">:default</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># we assume that we have a class CsvImporter to handle the import</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span><span class="line">    <span class="no">CsvImporter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span><span class="o">.</span><span class="n">run</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see above, we have <code>queue_as</code> and <code>perform</code>, these two methods are required by convention
when creating ActiveJob class.</p>

<p>As you might have known that sidekiq supports multiple queues, which we configure with <code>queues</code> option
in the sidekiq config file. In the above example, I tell Rails to delegate this CSV job to default queue by
specifying the queue name using <code>queue_as</code> API.</p>

<p>The <code>perform</code> method is the logic of job handler, what you want to do with the job. Please be noted that
the arguments for this method must be a legal JSON types such as String, Integer, Flat, nil, True/False, Hash, Array
or GlobalID instances. The latter one is very interesting, please read more about it in the latter section.</p>

<h2 id="the-art-of-enqueuing">The art of enqueuing</h2>

<p>We could tell Rails to queue a job and run it as soon as the queue is free with <code>#perform_later</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">CsvImportJob</span><span class="o">.</span><span class="n">perform_later</span><span class="p">(</span><span class="s1">&#39;/tmp/my_file.csv&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and if you peek into <code>log/development.log</code> you should see:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">[</span><span class="no">ActiveJob</span><span class="o">]</span> <span class="no">Enqueued</span> <span class="no">CsvImportJob</span> <span class="p">(</span><span class="no">Job</span> <span class="ss">ID</span><span class="p">:</span> <span class="mi">525</span><span class="n">b3f7b</span><span class="o">-</span><span class="n">adab</span><span class="o">-</span><span class="mi">41</span><span class="n">de</span><span class="o">-</span><span class="n">afe7</span><span class="o">-</span><span class="n">bee229188501</span><span class="p">)</span> <span class="n">to</span> <span class="no">Sidekiq</span><span class="p">(</span><span class="n">csv</span><span class="p">)</span> <span class="n">with</span> <span class="ss">arguments</span><span class="p">:</span> <span class="s2">&quot;/tmp/my_file.csv&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the output indicates that our job has been successfully queued and processed</p>

<h2 id="run-the-queue-in-the-future">Run the queue in the future!</h2>

<p>What&#8217;s cool about ActiveJob is that it allows you to schedule the time to run enequeued jobs.</p>

<p>we could delay the running till tomorrow noon by using <code>#set</code> method with <code>wait_until</code> option:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">CsvImportJob</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">wait_until</span><span class="p">:</span> <span class="no">Date</span><span class="o">.</span><span class="n">tomorrow</span><span class="o">.</span><span class="n">noon</span><span class="p">)</span><span class="o">.</span><span class="n">perform_later</span><span class="p">(</span><span class="s1">&#39;/tmp/my_file.csv&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>which generates log line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">[</span><span class="no">ActiveJob</span><span class="o">]</span> <span class="no">Enqueued</span> <span class="no">CsvImportJob</span> <span class="p">(</span><span class="no">Job</span> <span class="ss">ID</span><span class="p">:</span> <span class="mi">08</span><span class="n">f113f4</span><span class="o">-</span><span class="n">d12c</span><span class="o">-</span><span class="mi">4401</span><span class="o">-</span><span class="n">a84e</span><span class="o">-</span><span class="mi">1</span><span class="n">b0e55f194d6</span><span class="p">)</span> <span class="n">to</span> <span class="no">Sidekiq</span><span class="p">(</span><span class="n">csv</span><span class="p">)</span> <span class="n">at</span> <span class="mi">2014</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mo">04</span> <span class="mi">12</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="no">UTC</span> <span class="n">with</span> <span class="ss">arguments</span><span class="p">:</span> <span class="s2">&quot;/tmp/my_file.csv&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the above output clearly point out that the job is scheduled to run on 2014-10-04 12:00:00 UTC. Cool, isn&#8217;t it?</p>

<p>Furthermore, the option <code>wait</code> is also very cool too, it takes in human idomatic syntax from now on:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">CsvImportJob</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="ss">wait</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="n">week</span><span class="p">)</span><span class="o">.</span><span class="n">perform_later</span><span class="p">(</span><span class="s1">&#39;/tmp/my_file.csv&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the above code will tell the worker to run the job after 2 weeks from now.</p>

<h2 id="prioritise-with-multi-queues">Prioritise with multi-queues</h2>

<p>Let&#8217;s assume that the business people want file that are located in folder <code>/tmp/urgent</code> to be processed first.
How could we go about tackling this? Introducing multi-queues, by specifying queues with higher weight, in our
case, we configure:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">:queues</span><span class="p">:</span>
</span><span class="line">  <span class="o">-</span> <span class="n">default</span>
</span><span class="line">  <span class="o">-</span> <span class="o">[</span><span class="n">high_priority</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the <code>high_priority</code> queue will have higher precedence than default queue, thus it&#8217;ll be run first.</p>

<p>To tell ActiveJob to use this high priority queue on condition, we could parse in a block into our <code>queue_as</code> line.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CsvImportJob</span> <span class="o">&lt;</span> <span class="ss">ActiveJob</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">queue_as</span> <span class="k">do</span>
</span><span class="line">    <span class="k">if</span> <span class="n">urgent_job?</span>
</span><span class="line">      <span class="ss">:high_priority</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="ss">:default</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># we assume that we have a class CsvImporter to handle the import</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span><span class="line">    <span class="no">CsvImporter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span><span class="o">.</span><span class="n">run</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">urgent_job?</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">first</span> <span class="o">=~</span> <span class="sr">/\/urgent\//</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the code in the block will be evaluated under the context of the job. I guess I don&#8217;t have to explain much
about the code above, it&#8217;s just a simple condition. But you might be puzzled about the usage of <code>self.arguments</code>.
This method returns an array of parameters that are parsed into <code>#perform_later</code> during queuing. The arguments
get passed into <code>#perform</code> happens during job processing.</p>

<p>Let&#8217;s give our code a trial:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">CsvImportJob</span><span class="o">.</span><span class="n">perform_later</span><span class="p">(</span><span class="s1">&#39;/tmp/urgent/my_file.csv&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and pay close attention to out log output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">[</span><span class="no">ActiveJob</span><span class="o">]</span> <span class="o">[</span><span class="no">CsvImportJob</span><span class="o">]</span> <span class="o">[</span><span class="mi">30488</span><span class="n">ea0</span><span class="o">-</span><span class="mi">108</span><span class="n">c</span><span class="o">-</span><span class="mi">484</span><span class="n">f</span><span class="o">-</span><span class="n">bf12</span><span class="o">-</span><span class="mi">8341</span><span class="n">da38e76b</span><span class="o">]</span> <span class="no">Performed</span> <span class="no">CsvImportJob</span> <span class="n">from</span> <span class="no">Sidekiq</span><span class="p">(</span><span class="n">high_priority</span><span class="p">)</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>you could see that ActiveJob tells Sidekiq to run the job from <code>Sidekiq(high_priority)</code>.</p>

<p>However, should you want to run non-urgent file in high priority queue, you could override with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">CsvImportJob</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="ss">queue</span><span class="p">:</span> <span class="ss">:high_priority</span><span class="p">)</span><span class="o">.</span><span class="n">perform_later</span><span class="p">(</span><span class="s1">&#39;/tmp/my_file.csv&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="the-powerful-callbacks">The powerful callbacks!</h2>

<p>I love ActiveRecord callbacks, it is one of the best pattern ever in Rails!!! (I will kill you if you use it in your app!)</p>

<p>So just like ActiveRecord and ActionController, Rails also offers callbacks for ActiveJob. Below is the list of available
callbacks:</p>

<ul>
  <li>before/after/around_enqueue</li>
  <li>before/after/around_perform</li>
</ul>

<p>Those callbacks hook into the enqueuing and performing steps of the job.</p>

<p>We can use callbacks to do job logging and notification. Below is the code to notify manager once the job is finished:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CsvImportJob</span> <span class="o">&lt;</span> <span class="ss">ActiveJob</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">queue_as</span> <span class="ss">:default</span>
</span><span class="line">
</span><span class="line">  <span class="n">after_perform</span> <span class="ss">:notify_manager</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># we assume that we have a class CsvImporter to handle the import</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span><span class="line">    <span class="no">CsvImporter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span><span class="o">.</span><span class="n">run</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">notify_manager</span>
</span><span class="line">    <span class="no">NotificationMailer</span><span class="o">.</span><span class="n">job_done</span><span class="p">(</span><span class="no">User</span><span class="o">.</span><span class="n">find_manager</span><span class="p">)</span><span class="o">.</span><span class="n">deliver_later</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above code tells ActiveJob to execute <code>#notify_manager</code> after the CsvImporter has finished.</p>

<p>FYI, I use method <code>NotificationMailer#deliver_later</code>, this would tell ActiveJob to deliver email in the background too.</p>

<p>Please be noted that by default, Rails Mailer uses <code>mailers</code> queues when delivering email, thus we need to modify
the queues setting in <code>config/sidekiq.yml</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">:queues</span><span class="p">:</span>
</span><span class="line">  <span class="o">-</span> <span class="n">default</span>
</span><span class="line">  <span class="o">-</span> <span class="n">mailers</span>
</span><span class="line">  <span class="o">-</span> <span class="o">[</span><span class="n">high_priority</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You know what is even cooler? The same options of <code>ActiveJob.set</code> also apply for mailer class, which provides
a consistent API for background mailer jobs, thus you could use <code>wait</code> option, for eg:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">notify_manager</span>
</span><span class="line">  <span class="no">NotificationMailer</span><span class="o">.</span><span class="n">job_done</span><span class="p">(</span><span class="no">User</span><span class="o">.</span><span class="n">find_manager</span><span class="p">)</span><span class="o">.</span><span class="n">deliver_later</span><span class="p">(</span><span class="ss">wait</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="n">minutes</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>How cool is that!</p>

<h2 id="catching-the-exceptions">Catching the Exceptions!</h2>

<p>There is no guarantee that our CsvImporter won&#8217;t run into error, thus we should notify our manager should
the import job fails too! How can we do that? Introducing the <code>#rescue_from</code> method.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CsvImportJob</span> <span class="o">&lt;</span> <span class="ss">ActiveJob</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">queue_as</span> <span class="ss">:default</span>
</span><span class="line">
</span><span class="line">  <span class="n">rescue_from</span><span class="p">(</span><span class="no">StandardError</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">exception</span><span class="o">|</span>
</span><span class="line">    <span class="n">notify_failed_job_to_manager</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># we assume that we have a class CsvImporter to handle the import</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span><span class="line">    <span class="no">CsvImporter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span><span class="o">.</span><span class="n">run</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">notify_failed_job_to_manager</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span>
</span><span class="line">    <span class="no">NotificationMailer</span><span class="o">.</span><span class="n">job_failed</span><span class="p">(</span><span class="no">User</span><span class="o">.</span><span class="n">find_manager</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span><span class="o">.</span><span class="n">deliver_later</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above code tells ActiveJob to listen to job execution&#8217;s exception and then catch and
notify the manager.</p>

<h2 id="you-can-parse-live-object-omg">You can parse live object! OMG</h2>

<p>As I have stated above that valid arguments for <code>perform</code> method must be legal JSON type
or GlobalID instances.</p>

<p>What is GlobalID instance? The class of those instance must have <code>ActiveModel::GlobalIdentification</code> mixin.</p>

<p>Let me give you one example, assume that we have an AR class:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Report</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>ActiveRecord</code> does include <code>ActiveModel::GlobalIdentification</code>, so instead of parsing a pair ID integer or Class string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">klass_name</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>
</span><span class="line">  <span class="n">klass</span> <span class="o">=</span> <span class="n">klass_name</span><span class="o">.</span><span class="n">constantize</span>
</span><span class="line">  <span class="n">our_object</span> <span class="o">=</span> <span class="n">klass</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">SomeJob</span><span class="o">.</span><span class="n">perform_later</span><span class="p">(</span><span class="s1">&#39;Report&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>we could parse in the object</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">our_object</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">report</span> <span class="o">=</span> <span class="no">Report</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class="line"><span class="no">SomeJob</span><span class="o">.</span><span class="n">perform_later</span><span class="p">(</span><span class="n">report</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="rails-32x-support">Rails 3.2.x support?</h2>

<p>I back-ported AJ to Rails 3.2.x, you can find the gem at:</p>

<p>https://github.com/ruby-journal/passive_job/</p>

<h2 id="conclusion">Conclusion</h2>

<p>ActiveJob is surely a nice addition to Rails stack, it makes scheduling background jobs easier and more intuitive.
It is also a great abstraction for your app, you don&#8217;t have to worry about the under layer adapter so you can easily
swap from one adapter to other.</p>

<p>Overall, IMHO I really like working with the consistent API though I think Rails abuses inherentance too much. It&#8217;d
be much better if we could mixin ActiveJob into classes via composition.</p>

<p>Again, good luck and keep on learning folks!</p>

<p>PS: Thanks to Tao Guo for proof-reading</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to solve Silicon Straits Saigon hiring challenge]]></title>
    <link href="http://ruby-journal.com/how-to-solve-sss-hiring-challenge/"/>
    <updated>2014-08-21T17:04:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-solve-sss-hiring-challenge</id>
    <content type="html"><![CDATA[<p>Hello folks</p>

<p>For whom who might have not heard of Silicon Straits Saigon (SSS), this
company is one cool company in Vietnam with strong focus in tech such
as iOS and Web. When I use the word cool, I did not mean it before I
touch base with their hiring challenge.</p>

<p>SSS is known to have a quite unique way to challenge potential employees.
They give you a very cryptic page <a href="http://hiring.siliconstraits.vn">http://hiring.siliconstraits.vn</a> and
asks you to hack them.</p>

<p>Well, today I am going to show you how to solve this problem step by step.
I hope Mr. An (Director of SSS) wonât hate me for this.</p>

<p>Spoiler alert! Go give the challange a go yourself before reading!</p>

<!--more-->

<h2 id="the-challenge">The challenge</h2>

<p>Use your favourite browser and go apply for job at SSS at http://hiring.siliconstraits.vn.</p>

<p>Okay, where is my form? How could I fill in my name and my CV. Is this some kind
of troll? Oh hold on, I see something cryptic, that is cryptic <code>L3VzZXJzLzppZC9hcHBseSAg</code> string.</p>

<p>And the problem is âCall the APIâ. Which API? Give me API, damm it!</p>

<h2 id="decode-the-engima-not-really">Decode the Engima (not really)</h2>

<p>Honestly, I am clueless, been asked to call an API and given an encrypted string. I tried
to squeeze my tiny brain to put these two pieces of the puzzle together, and the only hypothesis
that is plausible enough is that the encrypted string has all details about the API.</p>

<p>Firstly, we need to decode this encrypted string. As you might know there are various ways
to encrypt a message, and you could go easy with Caesar Cipher or maniac with AES-256bit.
If you think SSS would give you an AES-256bit encrypted message, then I might be looking
for job at wrong place. SSS touts themselves a iOS and Web firm, not a security firm, thus
pragmatically I would not want to go back opening thick books of algorithm which turns
out useless because in theory you could not decode it within your lifetime!</p>

<p>Now, I assume this is something that does not require a private key to decrypt. Something
that is easy, something that is related to SSSâs expertise that is iOS or Web. Ouch, my
brain cell is burning, it hurts, by instinct I know that Web CSS and Backend code uses
Base64 quite often, so it is only plausible that I give Base64 a trial.</p>

<p>Letâs fire up Ruby REPL, that is <code>irb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ irb
</span><span class="line">&gt; require 'base64'
</span><span class="line">&gt; Base64.decode64 "L3VzZXJzLzppZC9hcHBseSAg"
</span><span class="line">&gt; =&gt; "/users/:id/apply  "</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Wow, just by chance, I got it right the first time ;). So we have another clue, a string
of â/users/:id/applyâ. So this must be the location of the HTTP API that SSS call to</p>

<h2 id="decode-the-id-param">Decode the :id param</h2>

<p>Based on my experiences, this route â/users/:id/applyâ looks like a RESTful resource
of user which takes in a param <code>:id</code>. But whatâs the <code>:id</code>? You asked me? I have no clues!</p>

<p>Because this is a HTTP Web API, letâs divert from the question and play around by calling
to this Web services first.</p>

<p>I used <code>curl</code> to make all calls. I chose <code>id=1</code> for the API call:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -X GET http://hiring.siliconstraits.vn/users/1/apply
</span><span class="line">{"error":"Please authenticate using Basic Auth with your token as password"}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The response gives me another clue, that is the service uses Basic Auth with token
as the password. This clue is very confusing because it does not tell me if my
param <code>:id</code> is correct or not.</p>

<p>I spent the next few minutes trying out other hypthosesis.</p>

<p>With the assumption this is a User resource, by convention I could get all
users from SSS by calling GET request to <code>/users</code>. I might give me the list
of <code>:id</code> that might be the key for the problem.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -X GET http://hiring.siliconstraits.vn/users
</span><span class="line">Good luck, keep trying ;)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Sadly, it turns out that SSS would not give it to you that easily. Who would anyway right?
If SSS does, I would stop here and look for a job elswhere.</p>

<p>Okay, next letâs try to call a POST on the same URL:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -X POST http://hiring.siliconstraits.vn/users
</span><span class="line">{"error":"email is required (prefer Gravatar)"}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This time the message is helpful, it asks me to post a param <code>:email</code>. So I did:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -X POST -d "email=trung.le@ruby-journal.com" http://hiring.siliconstraits.vn/users
</span><span class="line">{"email":"trung.le@ruby-journal.com","id":3615,"mobile":null,"name":null,"profile_url":null,"token":"AQGNAOFHQFSECGD","updated_at":"2014-08-21T07:01:48Z"}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Viola! The response gave me the <code>:id</code> plus the <code>:token</code></p>

<h2 id="by-passing-the-auth">By passing the Auth</h2>

<p>Now we have 3 pieces:</p>

<ul>
  <li>URL to make a call to (I assume a POST call) is: http://hiring.siliconstraits.vn/users/:id/apply</li>
  <li><code>:id</code> is <code>3615</code></li>
  <li><code>:token</code> is <code>AQGNAOFHQFSECGD</code></li>
</ul>

<p>Letâs make a last call to the API and hope that SSS would come back or I would come to see them
directly (still need to sort out few details for the Ruby Meetup 2 in September though). In the last
section, we know that SSS is using Basic Auth and token.</p>

<p>With the knowledge of the Auth type and token, we could send this detail to SSS for auth by setting
the header with <code>Authorization: Basic &lt;TOKEN&gt;</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -X POST -H "Authorization: Basic AQGNAOFHQFSECGD" http://hiring.siliconstraits.vn/users/3615/apply
</span><span class="line">{"error":"Please authenticate using Basic Auth with your token as password"}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>WTF?! It does not work!? I thought that it would be similar like Spotify API or Twitter API. So I tried
again with different header:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -X POST -H "Authorization: Token token=AQGNAOFHQFSECGD" http://hiring.siliconstraits.vn/users/3615/apply
</span><span class="line">{"error":"Please authenticate using Basic Auth with your token as password"}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Still not working! Hmm, so it seems to me my approach is wrong. I took a step back and thinking about the
word âBasic Authâ. As you might have know, there is a more primitive HTTP Basic Authentication out there
in the wild, so it might be that. Now try again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl --user 3615:AQGNAOFHQFSECGD -X POST http://hiring.siliconstraits.vn/users/3615/apply
</span><span class="line">{"error":"name, profile_url, mobile are required. Please update before apply (provide real, public data please)"}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OMG, it worked (well partially), I was right!</p>

<p>FYI, the <code>--user</code> param of curl takes <code>user:password</code>.</p>

<p>We now need to update the details  <code>name</code>, <code>profile_url</code> and <code>mobile</code> and come back to submit :)</p>

<h2 id="update-missing-details">Update missing details</h2>

<p>Okay, so I was right, this is a REST API, which means by convention, sending a PUT request to <code>/users/:id</code>
would upate the details for me.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl --user 3615:AQGNAOFHQFSECGD -X PUT -d name="Trung Le" -d profile_url="http://github.com/joneslee85" -d mobile="1080 888 888 888 888" http://hiring.siliconstraits.vn/users/3615
</span><span class="line">{"email":"trung.le@ruby-journal.com","id":3615,"mobile":"1080 888 888 888 888","name":"Trung Le","profile_url":"http://github.com/joneslee85","token":"AQGNAOFHQFSECGD","updated_at":"2014-08-21T08:09:27Z"}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hey hey, the response indicated that my details are now full-filled!</p>

<h2 id="connecting-all-the-dots">Connecting all the dots!</h2>

<p>Cut it short to 1 line and so I could head to the GYM:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl --user 3615:AQGNAOFHQFSECGD -X POST http://hiring.siliconstraits.vn/users/3615/apply
</span><span class="line">{"message":"Congratulations Trung Le!, here's the next step /users/:id/profile"}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally I got to the last step, hold on! WTF it is not finished?! Are you kidding me? Okay, letâs
check out my profile. My advice is making sure you check your CV at least 4 times before scheduling
the interview.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl --user 3615:AQGNAOFHQFSECGD -X GET http://hiring.siliconstraits.vn/users/3615/profile
</span><span class="line">Please authenticate yourself using token param</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Boom! -_- it did not work like I expected. Letâs give it the token param</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -X GET "http://hiring.siliconstraits.vn/users/3615/profile -d token="DGCESFQHFOANGQA"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and the response was:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;!DOCTYPE html&gt;
</span><span class="line">&lt;html&gt;
</span><span class="line">&lt;head&gt;
</span><span class="line">  &lt;title&gt;We're young &amp; we're hiring&lt;/title&gt;
</span><span class="line">  ...
</span><span class="line">&lt;/html&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The response is HTML with content about my profile and embedded within is another secret:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">================================================
</span><span class="line">U3R1Y2s/IEhlcmUncyBhIHRpcDogYml0Lmx5L1VUdlpoMyAg
</span><span class="line">================================================</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and it is also Base64 encrypted string, decoding it gives:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Stuck? Here's a tip: bit.ly/UTvZh3</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It turns out it is in turn encrypted with QR code. I start to like this game and what I get is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Don't stress, just REST</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Very interesting, what is REST?! Nvm, lol</p>

<p>I guess this ends our fun. I hope SSS would come up with some more fun in the future.</p>

<p>Bye folks</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is the difference between git rebase and git merge]]></title>
    <link href="http://ruby-journal.com/what-is-the-difference-between-git-rebase-and-git-merge/"/>
    <updated>2014-08-18T13:52:00+10:00</updated>
    <id>http://ruby-journal.com/what-is-the-difference-between-git-rebase-and-git-merge</id>
    <content type="html"><![CDATA[
<p>There are many people who asked me about the differences between <code>git rebase</code> vs <code>git merge</code>.
Read on if you want to know :-)</p>

<!--more-->

<p>Here is my simple explanation with real examples:</p>

<p>1) Create an empty project:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mkdir demo
</span><span class="line">cd demo
</span><span class="line">git init .</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2) Create first file</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">touch README.md
</span><span class="line">git add README.md
</span><span class="line">git commit -m 'Add README.md'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3) Create 2 separate branches from master branch, ie 1 for rebase testing and other for merge testing</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git checkout master -b rebase-test
</span><span class="line">git checkout master -b merge-test</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>double check and you shall see 2 new branches:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git checkout master
</span><span class="line">git branch
</span><span class="line">* master
</span><span class="line">  merge-test
</span><span class="line">  rebase-test</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4) Now let&#8217;s make some unique changes in our new branches</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git checkout rebase-test
</span><span class="line">touch hello.txt
</span><span class="line">git add hello.txt
</span><span class="line">git commit -m 'A hello from rebase branch'</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git checkout merge-test
</span><span class="line">touch bye.txt
</span><span class="line">git add bye.txt
</span><span class="line">git commit -m 'A goodbye from merge branch'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5) Okay, now let&#8217;s go back to our master branch and change
our README.md</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git checkout master
</span><span class="line">echo "WTF" &gt;&gt; README.md
</span><span class="line">git add README.md
</span><span class="line">git commit -m 'WTF README'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6) Now we have a new changes in master and we need to rebase
our 2 branches to be up-to-date with changes made in master.
The wording &#8216;rebase&#8217; here does not mean <code>git rebase</code>, it means
to sync feature branch with master branch</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git checkout rebase-test
</span><span class="line">git rebase master
</span><span class="line">
</span><span class="line">git checkout merge-test
</span><span class="line">git merge master
</span><span class="line"># accept the default new commit message and save</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7) Let&#8217;s compare the log tree:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git checkout rebase-test
</span><span class="line">git log --graph --pretty=oneline --abbrev-commit
</span><span class="line">* 933dae8 A hello from rebase branch
</span><span class="line">* 8142960 WTF README
</span><span class="line">* 0497b20 Add README</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git checkout merge-test
</span><span class="line">git log --graph --pretty=oneline --abbrev-commit
</span><span class="line">*   1af5ec5 Merge branch 'master' into merge-test
</span><span class="line">|\
</span><span class="line">| * 8142960 WTF README
</span><span class="line">* | 278a115 A goodbye from merge branch
</span><span class="line">|/
</span><span class="line">* 0497b20 Add README</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The commit that is at the top of the commit is the latest commit.</p>

<p>Paying close attention to log tree of <code>rebase-test</code>, we could see that
commit <code>933dae8 A hello from rebase branch</code> is pushed to the top, higher
than the master (which is created later) <code>8142960 WTF README</code>.</p>

<p>Compared to the log tree of <code>merge-test</code>, we can clearly see that it
is the other way around, that is the master commit <code>8142960 WTF README</code>
is placed to the top and higher than the commit <code>278a115 A goodbye from merge branch</code>.
Plus, an additional commit (or what I called meta-commit) <code>1af5ec5 Merge branch 'master' into merge-test</code>
is also created.</p>

<p>Okay, now you might ask WTF? Why people come up with 2 different ways
to do rebase? Isn&#8217;t the world too complicated already? Well, the answer
lies in how you want to rewrite history (Every crazy men who wants to
take on the world do). You use <code>git rebase</code> if you want your changes in
the feature branch to always the latest. And you use <code>git merge</code> if you
want to reflect the true ordering of commits.</p>

<p>For mosts of cases, I use <code>git merge</code> because of following cons of <code>git rebase</code>:</p>

<ul>
  <li>Cannot push to remote feature branch because the history of local and remote is mistmached.
And the only way to push it to remote branch is to use <code>git push --force</code> or being
explictily <code>git push origin &lt;name-of-branch&gt; --force</code> for the sake of avoiding pushing
into wrong branch. And this could cause lots of issue if you. (I did, so I know)</li>
  <li>Recursive pain and pain and pain when resolving conflicts</li>
</ul>

<p>The only cons that I know about <code>git merge</code> is that you have a long list of many
commits which could be hard on eyes. However I find it is not really an issue because
the log tree show the merged trees very clearly.</p>

<p>I guess that&#8217;s it for today folks. See you in another how to for dummies from me!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Override ordering with ActiveRecord]]></title>
    <link href="http://ruby-journal.com/override-ordering-with-activerecord/"/>
    <updated>2014-05-23T14:33:00+10:00</updated>
    <id>http://ruby-journal.com/override-ordering-with-activerecord</id>
    <content type="html"><![CDATA[
<p>If your ActiveRecord models happen to have default ordering scope, you could override
this ordering scope in queries by using <code>reorder</code> method.</p>

<!--more-->

<p>Imagine we have a model like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">default_scope</span> <span class="p">{</span> <span class="n">order</span><span class="p">(</span><span class="ss">:updated_at</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>All queries would include this scope by default. If you want to override this scope,
you can apply <code>reorder</code> to the query chain:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">query_chain</span><span class="o">.</span><span class="n">reorder</span><span class="p">(</span><span class="ss">:order_index</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That&#8217;s it for today folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to write custom serializer for ActiveRecord#serialize]]></title>
    <link href="http://ruby-journal.com/how-to-write-custom-serializer-for-activerecord-number-serialize/"/>
    <updated>2014-04-21T07:49:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-write-custom-serializer-for-activerecord-number-serialize</id>
    <content type="html"><![CDATA[
<p>Rails comes with a powerful and convenient <code>serialize</code> method that would do the serialization/deserializtion
for a specify column of an ActiveRecord model. In today tutorial, I&#8217;ll walk you through on how to write a
custom serializer that would encrypt/decrypt your serialized value for extra security.</p>

<!--more-->

<h2 id="the-basic">The Basic</h2>

<p>ActiveRecord model has access to class method <code>serialize</code> which by default would serialize/deserialize the
specified column value with YAML.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">serialize</span> <span class="ss">:properties</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see in the example above, our <code>Product</code> class has column <code>properties</code> which we will store an
array of properties hash:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">o</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;The Uber Kubik&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">o</span><span class="o">.</span><span class="n">properties</span> <span class="o">=</span> <span class="o">[</span><span class="ss">length</span><span class="p">:</span> <span class="s1">&#39;10cm&#39;</span><span class="p">,</span> <span class="ss">width</span><span class="p">:</span> <span class="s1">&#39;20cm&#39;</span><span class="o">]</span>
</span><span class="line"><span class="n">o</span><span class="o">.</span><span class="n">save!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and you might be wondering what sort of magic has happened. Let&#8217;s check the output log:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="text"><span class="line"> (0.1ms)  begin transaction
</span><span class="line">SQL (0.4ms)  INSERT INTO &quot;products&quot; (&quot;name&quot;, &quot;created_at&quot;, &quot;properties&quot;, &quot;updated_at&quot;) VALUES (?, ?, ?)  [[&quot;name&quot;, &quot;The Uber Kubik&quot;], [&quot;created_at&quot;, &quot;2014-04-20 21:59:47.486719&quot;], [&quot;properties&quot;, &quot;---\n- :length: 10cm\n  :width: 20cm\n&quot;], [&quot;updated_at&quot;, &quot;2014-04-20 21:59:47.486719&quot;]]
</span><span class="line"> (1.2ms)  commit transaction
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>clearly we learn that Rails store a YAML string <code>---\n- :length: 10cm\n  :width: 20cm\n</code> into DB. Again, Rails
also does the magic to deserialize this YAML string back to object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">o</span><span class="o">.</span><span class="n">properties</span>
</span><span class="line"><span class="c1">#=&gt; [length: &#39;10cm&#39;, width: &#39;20cm&#39;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="alternative-serializer">Alternative serializer</h2>

<p>Rails takes in two arguments for class method <code>serialize</code>, the first is the column name and the second is the <em>coder
classname</em>. The coder class is the name of the serializer class. Rails comes with two serialzers, YAML and JSON.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">serialize</span> <span class="ss">:properties</span><span class="p">,</span> <span class="no">JSON</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By specifying <code>JSON</code> as the second argument for <code>serialize</code> we tell Rails to use serialize/deseralize the column
value with JSON.</p>

<p>Again, you might be wondering how YAML and JSON serializers work? Well, the basically they are class that have two
class methods, that is <code>load</code> for serialization and <code>dump</code> for deserialization.</p>

<p>Let&#8217;s write a JSON serializer that encrypt/decrypt the value with RSA key.</p>

<p>We create a very naive and primitive cipher that simply un/reverse the string:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># lib/protected_json_serializer.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">ProtectedJsonSerializer</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">load</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">    <span class="no">JSON</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">decrypt</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">    <span class="n">encrypt</span><span class="p">(</span><span class="no">JSON</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">    <span class="n">value</span><span class="o">.</span><span class="n">reverse</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">    <span class="n">value</span><span class="o">.</span><span class="n">reverse</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and set the coder to <code>ProtectedJsonSerializer</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;protected_json_serializer&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">serialize</span> <span class="ss">:properties</span><span class="p">,</span> <span class="no">ProtectedJsonSerializer</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and now let&#8217;s see the magic:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">o</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;The Uber Kubik&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">o</span><span class="o">.</span><span class="n">properties</span> <span class="o">=</span> <span class="o">[</span><span class="ss">length</span><span class="p">:</span> <span class="s1">&#39;10cm&#39;</span><span class="p">,</span> <span class="ss">width</span><span class="p">:</span> <span class="s1">&#39;20cm&#39;</span><span class="o">]</span>
</span><span class="line"><span class="n">o</span><span class="o">.</span><span class="n">save!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>would yield log output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="text"><span class="line"> (0.1ms)  begin transaction
</span><span class="line">SQL (0.4ms)  INSERT INTO &quot;products&quot; (&quot;name&quot;, &quot;created_at&quot;, &quot;properties&quot;, &quot;updated_at&quot;) VALUES (?, ?, ?)  [[&quot;name&quot;, &quot;The Uber Kubik&quot;], [&quot;created_at&quot;, &quot;2014-04-20 21:59:47.486719&quot;], [&quot;properties&quot;, &quot;]}\&quot;mc02\&quot;:\&quot;htdiw\&quot;,\&quot;mc01\&quot;:\&quot;htgnel\&quot;{[&quot;], [&quot;updated_at&quot;, &quot;2014-04-20 21:59:47.486719&quot;]]
</span><span class="line"> (1.2ms)  commit transaction
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the output clearly shows that our <code>properties</code> value is encryted <code>["properties", "]}\"mc02\":\"htdiw\",\"mc01\":\"htgnel\"{["]</code></p>

<p>so now we can rest assured that even RSA has access to our DB, they could not read our data (well, you need
to do a better job with the encryption than my naive implementation).</p>

<h3 id="summary">Summary</h3>

<p>For most of common cases, you probably don&#8217;t have to worry about custom serializer. But the power is there
if you ever need it. For example, having custom data type column like Array or Set which comes very handy.</p>

<p>Please remember that <code>serialzie</code> takes the serializer class name as the second argument
and the serializer must have 2 methods <code>load</code> and <code>dump</code>.</p>

<p>That&#8217;s all folks. Keep on learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to override default primary key id in Rails]]></title>
    <link href="http://ruby-journal.com/how-to-override-default-primary-key-id-in-rails/"/>
    <updated>2014-04-18T10:28:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-override-default-primary-key-id-in-rails</id>
    <content type="html"><![CDATA[
<p>Rails is all about Convention over Configuration, this includes the DB primary key,
which is always set to be <code>id</code> column. What if you want to use different column
as your primary key? Read on and I&#8217;ll show you how.</p>

<!--more-->

<p>NOTE: This article is written for Rails 4.1.1 /w Postgres</p>

<h2 id="usecase">Usecase</h2>

<p>My webstore uses a special string ID, called <code>sku</code>, this ID is unique and queried
instead of <code>id</code> column. For the sake of simplicty, I use Rails scaffolding:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rails g scaffold products sku</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="what-is-primary-key">What is primary key?</h2>

<p>A column is called a primary key when it is:</p>

<ul>
  <li>has not NULL constraint</li>
  <li>has UNIQUE contraint</li>
  <li>has index</li>
</ul>

<p>We could prove this by checking out DB schema:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rails db
</span><span class="line">psql (9.3.4)
</span><span class="line">Type "help" for help.
</span><span class="line">
</span><span class="line">webstote_development=# \d products
</span><span class="line">                                     Table "public.products"
</span><span class="line">   Column   |            Type             |                       Modifiers
</span><span class="line">------------+-----------------------------+-------------------------------------------------------
</span><span class="line"> id         | integer                     | not null default nextval('products_id_seq'::regclass)
</span><span class="line"> sku        | character varying(255)      |
</span><span class="line"> created_at | timestamp without time zone |
</span><span class="line"> updated_at | timestamp without time zone |
</span><span class="line">Indexes:
</span><span class="line">    "products_pkey" PRIMARY KEY, btree (id)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above output clearly indicates that at DB level, is is NOT NULL, is PRIMARY_KEY and indexed.</p>

<p>According to Postgres doc, PRIMARY_KEY constraint is a combination of a unique constraint and a not-null constraint.</p>

<h2 id="migration">Migration</h2>

<p>We have following migration:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CreateProducts</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">change</span>
</span><span class="line">    <span class="n">create_table</span> <span class="ss">:products</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:sku</span>
</span><span class="line">
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and we want to turn the <code>sku</code> column to be our primary key.</p>

<p>By convention, you would not see any code mention about the primary <code>id</code> column.
This column is automatically created when you call method <code>create_table</code>.</p>

<p>We can tell Rails not to create column id by parsing <code>id: false</code> options</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="n">create_table</span> <span class="ss">:products</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and then we tell Rails to turn <code>sku</code> to be primary key. After doing abit of research,
I found method <code>ActiveRecord::ConnectionAdapters::TableDefinitiion#primary_key</code> with
following code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 68</span>
</span><span class="line"><span class="k">def</span> <span class="nf">primary_key</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">type</span> <span class="o">=</span> <span class="ss">:primary_key</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class="line">  <span class="n">column</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">:primary_key</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">))</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Disecting the above shows that by using type <code>primary_key</code>, I could turn my column to primary key.
I wonder what this type is. Let&#8217;s give it a go:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">create_table</span> <span class="ss">:products</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">  <span class="n">t</span><span class="o">.</span><span class="n">primary_key</span> <span class="ss">:sku</span>
</span><span class="line">
</span><span class="line">  <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>after <code>rake db:migrate</code>, I check my DB schema again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">                                  <span class="no">Table</span> <span class="s2">&quot;public.products&quot;</span>
</span><span class="line">   <span class="no">Column</span>   <span class="o">|</span>            <span class="no">Type</span>             <span class="o">|</span>                       <span class="no">Modifiers</span>
</span><span class="line"><span class="o">------------+-----------------------------+--------------------------------------------------------</span>
</span><span class="line"> <span class="n">sku</span>        <span class="o">|</span> <span class="n">integer</span>                     <span class="o">|</span> <span class="ow">not</span> <span class="n">null</span> <span class="n">default</span> <span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;products_sku_seq&#39;</span><span class="o">::</span><span class="n">regclass</span><span class="p">)</span>
</span><span class="line"> <span class="n">created_at</span> <span class="o">|</span> <span class="n">timestamp</span> <span class="n">without</span> <span class="n">time</span> <span class="n">zone</span> <span class="o">|</span>
</span><span class="line"> <span class="n">updated_at</span> <span class="o">|</span> <span class="n">timestamp</span> <span class="n">without</span> <span class="n">time</span> <span class="n">zone</span> <span class="o">|</span>
</span><span class="line"><span class="ss">Indexes</span><span class="p">:</span>
</span><span class="line"><span class="s2">&quot;products_pkey&quot;</span> <span class="no">PRIMARY</span> <span class="no">KEY</span><span class="p">,</span> <span class="n">btree</span> <span class="p">(</span><span class="n">sku</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>sku</code> column is assigned with <code>integer</code> datatype, which is not correct. So <code>primary_key</code> type must be of <code>integer</code> type.</p>

<p>Naively, I try other alternatives:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">create_table</span> <span class="ss">:products</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">  <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:sku</span><span class="p">,</span> <span class="ss">primary</span><span class="p">:</span> <span class="kp">true</span>
</span><span class="line">
</span><span class="line">  <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OR</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">create_table</span> <span class="ss">:products</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">  <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:sku</span><span class="p">,</span> <span class="n">primary_key</span><span class="p">:</span> <span class="kp">true</span>
</span><span class="line">
</span><span class="line">  <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>which doesn&#8217;t do anything. Meh :(</p>

<p>It is okay, if Rails doesn&#8217;t let you do so, because you can still be able to do a workaround:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CreateProducts</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">change</span>
</span><span class="line">    <span class="n">create_table</span> <span class="ss">:products</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:sku</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class="line">
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">execute</span> <span class="sx">%Q{ ALTER TABLE &quot;products&quot; ADD PRIMARY KEY (&quot;sku&quot;); }</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and bravo, it does the job! Hold on, there is a twist!</p>

<p>our <code>db/schema.rb</code> says nothing about the contraint addition line, which makes
sense because we are not using SQL format to preserve it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">schema_format</span> <span class="o">=</span> <span class="ss">:sql</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I don&#8217;t like this solution because I love readability of helper methods than SQL.</p>

<p>I come up with better solution (IMHO), according to Postgres documentation:</p>

<p>&#8220;a primary key constraint is simply a combination of a unique constraint and a not-null constraint&#8221;</p>

<p>Let&#8217;s see how I do it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CreateProducts</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">change</span>
</span><span class="line">    <span class="n">create_table</span> <span class="ss">:products</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:sku</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class="line">
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">add_index</span> <span class="ss">:products</span><span class="p">,</span> <span class="ss">:sku</span><span class="p">,</span> <span class="ss">unique</span><span class="p">:</span> <span class="kp">true</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and let&#8217;s check our schema:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">           <span class="no">Table</span> <span class="s2">&quot;public.products&quot;</span>
</span><span class="line">   <span class="no">Column</span>   <span class="o">|</span>            <span class="no">Type</span>             <span class="o">|</span> <span class="no">Modifiers</span>
</span><span class="line"><span class="o">------------+-----------------------------+-----------</span>
</span><span class="line"> <span class="n">sku</span>        <span class="o">|</span> <span class="n">character</span> <span class="n">varying</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span>      <span class="o">|</span> <span class="ow">not</span> <span class="n">null</span>
</span><span class="line"> <span class="n">created_at</span> <span class="o">|</span> <span class="n">timestamp</span> <span class="n">without</span> <span class="n">time</span> <span class="n">zone</span> <span class="o">|</span>
</span><span class="line"> <span class="n">updated_at</span> <span class="o">|</span> <span class="n">timestamp</span> <span class="n">without</span> <span class="n">time</span> <span class="n">zone</span> <span class="o">|</span>
</span><span class="line"><span class="ss">Indexes</span><span class="p">:</span>
</span><span class="line"><span class="s2">&quot;index_products_on_sku&quot;</span> <span class="no">UNIQUE</span><span class="p">,</span> <span class="n">btree</span> <span class="p">(</span><span class="n">sku</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Though our sku doesn&#8217;t have PRIMARY_KEY contrsaint, yet it is equivalent.</p>

<p>And look at our <code>db/schema.rb</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span><span class="p">(</span><span class="ss">version</span><span class="p">:</span> <span class="mi">20140510012730</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># These are extensions that must be enabled in order to support this database</span>
</span><span class="line">  <span class="n">enable_extension</span> <span class="s2">&quot;plpgsql&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="n">create_table</span> <span class="s2">&quot;products&quot;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">    <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="s2">&quot;sku&quot;</span><span class="p">,</span>        <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class="line">    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;created_at&quot;</span>
</span><span class="line">    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;updated_at&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">add_index</span> <span class="s2">&quot;products&quot;</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;sku&quot;</span><span class="o">]</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;index_products_on_sku&quot;</span><span class="p">,</span> <span class="ss">unique</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">using</span><span class="p">:</span> <span class="ss">:btree</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>All lovely and readable ;)</p>

<h2 id="model">Model</h2>

<p>We tell our model <code>Product</code> to use <code>sku</code> as primary key:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="nb">self</span><span class="o">.</span><span class="n">primary_key</span> <span class="o">=</span> <span class="s1">&#39;sku&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And you are set to go.</p>

<p>Now I wonder if changing to different primary key, would it cause any side effect
to method like <code>#find</code>. The answer is not at all, if we look into <code>ActiveRecord::AttributeMethods::PrimaryKey</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># File activerecord/lib/active_record/attribute_methods/primary_key.rb, line 17</span>
</span><span class="line"><span class="k">def</span> <span class="nf">id</span>
</span><span class="line">  <span class="n">sync_with_transaction_state</span>
</span><span class="line">  <span class="n">read_attribute</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">primary_key</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>the <code>read_attribute(self.class.primary_key)</code> line tells us that it will reference to
our <code>Product.primary_key</code>, that is <code>sku</code>. Therefore, we you call:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;SKU-01&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>it would generate SQL:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">SELECT</span>  <span class="ss">&quot;products&quot;</span><span class="p">.</span><span class="o">*</span> <span class="k">FROM</span> <span class="ss">&quot;products&quot;</span>  <span class="k">WHERE</span> <span class="ss">&quot;products&quot;</span><span class="p">.</span><span class="ss">&quot;sku&quot;</span> <span class="o">=</span> <span class="err">$</span><span class="mi">1</span> <span class="k">LIMIT</span> <span class="mi">1</span>  <span class="p">[[</span><span class="ss">&quot;sku&quot;</span><span class="p">,</span> <span class="s1">&#39;SKU-01&#39;</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and FYI, there is also writer method <code>#id=</code> that is provided by Rails:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">p</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="nb">p</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="s1">&#39;SKU-02&#39;</span>
</span><span class="line"><span class="nb">p</span><span class="o">.</span><span class="n">sku</span>
</span><span class="line"><span class="c1"># SKU-02</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you don&#8217;t like to use <code>#id</code> and <code>#id=</code>, you could override them in your class:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">id</span>
</span><span class="line">    <span class="k">raise</span> <span class="no">NoMethodError</span><span class="p">,</span> <span class="s2">&quot;Please call </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">primary_key</span><span class="si">}</span><span class="s2"> instead.&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">id</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">    <span class="k">raise</span> <span class="no">NoMethodError</span><span class="p">,</span> <span class="s2">&quot;Please call </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">primary_key</span><span class="si">}</span><span class="s2">= instead.&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Be aware that <code>Product.find</code> won&#8217;t work anymore, and other Rails helper that relies
on <code>id</code> will stop functioning. If you really want that, you need to override more
methods and this seems too much of a pain for me. So I&#8217;d highly recommend you to
leave <code>#id</code> as is.</p>

<h1 id="routing">Routing</h1>

<p>Our default rails is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># config/routes.rb</span>
</span><span class="line"><span class="n">resources</span> <span class="ss">:products</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>which by default will generate routes with reference to <code>:id</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">bundle exec rake routes
</span><span class="line">            Prefix Verb  URI Pattern                       Controller#Action
</span><span class="line">           products GET   /products(.:format)                 products#index
</span><span class="line">                   POST   /products(.:format)                 products#create
</span><span class="line">        new_product GET   /products/new(.:format)             products#new
</span><span class="line">       edit_product GET   /products/:id/edit(.:format)        products#edit
</span><span class="line">            product GET   /products/:id(.:format)             products#show
</span><span class="line">                  PATCH   /products/:id(.:format)             products#update
</span><span class="line">                    PUT   /products/:id(.:format)             products#update
</span><span class="line">                 DELETE   /products/:id(.:format)             products#destroy
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With Rails 4, you can change <code>:id</code> to <code>:sku</code> with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># config/routes.rb</span>
</span><span class="line"><span class="n">resources</span> <span class="ss">:products</span><span class="p">,</span> <span class="ss">param</span><span class="p">:</span> <span class="ss">:sku</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>our routes would be:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">bundle exec rake routes
</span><span class="line">            Prefix Verb  URI Pattern                       Controller#Action
</span><span class="line">           products GET   /products(.:format)              products#index
</span><span class="line">                   POST   /products(.:format)              products#create
</span><span class="line">        new_product GET   /products/new(.:format)          products#new
</span><span class="line">       edit_product GET   /products/:sku/edit(.:format)    products#edit
</span><span class="line">            product GET   /products/:sku(.:format)         products#show
</span><span class="line">                  PATCH   /products/:sku(.:format)         products#update
</span><span class="line">                    PUT   /products/:sku(.:format)         products#update
</span><span class="line">                 DELETE   /products/:sku(.:format)         products#destroy
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please be noted that you need to modify the <code>ProductssController</code> to find Order record
with <code>params[:sku]</code> instead of <code>params[:id]</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># app/controllers/products_controller.rb</span>
</span><span class="line"><span class="k">def</span> <span class="nf">set_product</span>
</span><span class="line">  <span class="vi">@product</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:sku</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="uri">URI</h2>

<p>For example if we have a Product with a very non-URI friendly SKU like: &#8216;SKU 001&#8217;,
when we access our <code>ProductsController#show</code>, we would have following URL:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">products</span><span class="o">/</span><span class="no">SKU</span><span class="o">%</span><span class="mi">23001</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>to make our primary key URI friendly, we could override <code>#to_param</code> method. By
convention, Rails would call this method to work out the routing URI:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">to_param</span>
</span><span class="line">    <span class="n">sku</span><span class="o">.</span><span class="n">parameterize</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and the URI turns to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">products</span><span class="o">/</span><span class="no">SKU</span><span class="o">-</span><span class="mo">001</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>Rails is all about CoC, for most of the cases, you should stick to it. However you could
override the convention by:</p>

<ul>
  <li>Adding NOT NULL and UNIQUE contrainst to column you want to be the primary key</li>
  <li>Set <code>self.primary_key</code> for the model</li>
  <li>Set <code>param</code> for your routing</li>
  <li>Override <code>#to_param</code> for friendly URI</li>
</ul>

<p>That&#8217;s all for today. Please leave comments if you have any question.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to DRY your Rails routes]]></title>
    <link href="http://ruby-journal.com/how-to-dry-your-rails-routes/"/>
    <updated>2014-04-18T09:29:00+10:00</updated>
    <id>http://ruby-journal.com/how-to-dry-your-rails-routes</id>
    <content type="html"><![CDATA[
<p>So you have duplicated routes in your resources? In today tutorial, I&#8217;ll show you how to DRY it up abit.</p>

<!--more-->

<h2 id="sample-code">Sample code</h2>

<p>Just imagine we have following routes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># config/routes.rb</span>
</span><span class="line">
</span><span class="line"><span class="n">resources</span> <span class="ss">:pamphlets</span> <span class="k">do</span>
</span><span class="line">  <span class="n">member</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">resources</span> <span class="ss">:posters</span> <span class="k">do</span>
</span><span class="line">  <span class="n">member</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">collection</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:bulk_print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As we could see in the code above, we have two resources <code>:pamphlets</code> and <code>:posters</code> that both share same
<code>post :print</code> route.</p>

<h2 id="dry-with-rails-3">DRY with Rails 3</h2>

<p>In order to DRY it, we could extract the block <code>member { post :print }</code> to a shared proc <code>printable</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">printable</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">  <span class="n">member</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">resources</span> <span class="ss">:pamphlets</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">printable</span>
</span><span class="line">
</span><span class="line"><span class="n">resources</span> <span class="ss">:posters</span> <span class="k">do</span>
</span><span class="line">  <span class="n">printable</span><span class="o">.</span><span class="n">call</span>
</span><span class="line">
</span><span class="line">  <span class="n">collection</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:bulk_print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>resources</code> method take in a block, so for <code>pamphlets</code> we parse the whole <code>printable</code> in as block. It is
a bit different with <code>posters</code> because this resource already have a block, here what we do is we call
the proc <code>printable</code> within the block by using <code>call</code>.</p>

<h3 id="dry-with-rails-4">DRY with Rails 4</h3>

<p>With Rails 4, it is much easier by using routing concern. Here&#8217;s how:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">concern</span> <span class="ss">:printable</span> <span class="k">do</span>
</span><span class="line">  <span class="n">member</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">resources</span> <span class="ss">:pamphlets</span><span class="p">,</span> <span class="ss">concerns</span><span class="p">:</span> <span class="ss">:printable</span>
</span><span class="line">
</span><span class="line"><span class="n">resources</span> <span class="ss">:posters</span><span class="p">,</span> <span class="ss">concerns</span><span class="p">:</span> <span class="ss">:printable</span> <span class="k">do</span>
</span><span class="line">  <span class="n">collection</span> <span class="k">do</span>
</span><span class="line">    <span class="n">post</span> <span class="ss">:bulk_print</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We create a routing concern by using method <code>concern</code> and specify which concern we want to use for each resource
via argument <code>concerns</code>.</p>

<h3 id="summary">Summary</h3>

<p>Rails routing is very powerful and there are many magic that I want to talk to you in near future. For now, you learn
how to extract shared routes into concern to DRY your routes. Go on, share it with everyone and keep on learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Liquid template in Ruby done right]]></title>
    <link href="http://ruby-journal.com/liquid-template-in-ruby-done-right/"/>
    <updated>2014-04-10T16:48:00+10:00</updated>
    <id>http://ruby-journal.com/liquid-template-in-ruby-done-right</id>
    <content type="html"><![CDATA[
<p>Liquid Templating Engine is an awesome technology and with the power of gem &#8216;liquid&#8217;,
everybody can start using without much hassles. I saw many projects used this gem
but sadly most of them are quite bad. In this tutorial, I&#8217;ll go through a bad example
and show you how to refactor it.</p>

<!--more-->

<h2 id="the-smell">The smell</h2>

<p>Below code is for a report generation function for a car dealer Rails app.</p>

<p>Let&#8217;s see the codes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># app/models/car_issue.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">CarIssue</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">belongs_to</span> <span class="ss">:car</span>
</span><span class="line">
</span><span class="line">  <span class="n">liquid_methods</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:reference_number</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># app/models/car.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Car</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_many</span> <span class="ss">:car_issues</span>
</span><span class="line">  <span class="n">belongs_to</span> <span class="ss">:customer</span>
</span><span class="line">
</span><span class="line">  <span class="n">liquid_methods</span> <span class="ss">:car_make</span><span class="p">,</span> <span class="ss">:owner</span><span class="p">,</span> <span class="ss">:dealer_contact_details</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">owner</span>
</span><span class="line">    <span class="n">customer</span><span class="o">.</span><span class="n">full_name</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">car_make</span>
</span><span class="line">    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">brand</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">model</span><span class="si">}</span><span class="s2"> MY </span><span class="si">#{</span><span class="n">manufacturer_year</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">dealer_contact_details</span>
</span><span class="line"><span class="o">&lt;&lt;-</span><span class="no">CONTACT</span>
</span><span class="line"><span class="sh">  Uber Dealer</span>
</span><span class="line">
</span><span class="line"><span class="sh">  9 Sesame St</span>
</span><span class="line"><span class="sh">  Emo Town</span>
</span><span class="line"><span class="no">CONTACT</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># app/models/customer.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Customer</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">liquid_methods</span> <span class="ss">:full_name</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class="line">    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># app/services/car_report_generation.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">CarReportGeneration</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">car</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@car</span> <span class="o">=</span> <span class="n">car</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">template</span>
</span><span class="line"><span class="o">&lt;&lt;-</span><span class="no">TEMPLATE</span>
</span><span class="line"><span class="sh">  Dear {{ car.owner }},</span>
</span><span class="line">
</span><span class="line"><span class="sh">  We&#39;ve performed inspection on your {{ car.car_make }} and found following issues:</span>
</span><span class="line">
</span><span class="line"><span class="sh">  {% for issue in car.issues %}</span>
</span><span class="line"><span class="sh">    * {{ issue.reference_number }} - {{ issue.description }}</span>
</span><span class="line"><span class="sh">  {% endfor %}</span>
</span><span class="line">
</span><span class="line"><span class="sh">  Please call us back for quotes</span>
</span><span class="line">
</span><span class="line"><span class="sh">  Sincerely yours</span>
</span><span class="line">
</span><span class="line"><span class="sh">  {{ car.dealer_contact_details }}</span>
</span><span class="line"><span class="no">TEMPLATE</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">generate_report</span>
</span><span class="line">    <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">template</span><span class="p">)</span><span class="o">.</span><span class="n">render</span> <span class="s1">&#39;car&#39;</span> <span class="o">=&gt;</span> <span class="vi">@car</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see above, the main logic is <code>CarReportGeneration#generate_report</code> which
render the report template using Liquid to populate fields.</p>

<p>What&#8217;s so stink about the above code? In fact, I think it&#8217;s perfectly fine. However should
the report requires more details, user will create more methods within Car model to serve
as report details getter and this could get very ugly quickly as the coupling emerges more
clearly.</p>

<h2 id="refactoring">Refactoring</h2>

<p>We will take many little steps.</p>

<p>The first step is to reduce the coupling between our models and Liquid. As you can see
above that the code exposes methods to Liquid with method <code>liquid_methods</code>. This method
meta-programmingly create for you a class which is a subclass of Liquid::Drop then create
instance methods that matches the parsed method names.</p>

<p>So our Car&#8217;s <code>liquid_methods :car_make, :owner, :dealer_contact_details</code> would do following implicit things:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Car</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">to_liquid</span>
</span><span class="line">    <span class="ss">Car</span><span class="p">:</span><span class="ss">:LiquidDropClass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Car</span><span class="o">::</span><span class="no">LiquidDropClass</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Drop</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initalize</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@object</span> <span class="o">=</span> <span class="n">object</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">owner</span>
</span><span class="line">    <span class="vi">@object</span><span class="o">.</span><span class="n">customer</span><span class="o">.</span><span class="n">full_name</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">car_make</span>
</span><span class="line">    <span class="vi">@object</span><span class="o">.</span><span class="n">car_make</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">dealer_contact_details</span>
</span><span class="line">    <span class="vi">@object</span><span class="o">.</span><span class="n">dealer_contact_details</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We see that the magic lies in method <code>to_liquid</code> which point to a <code>Liquid::Drop</code> class.
This special object is what Liquid template takes in to render the template.</p>

<p>Now we could replicate the logic easily. See the code below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># app/models/car.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Car</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_many</span> <span class="ss">:car_issues</span>
</span><span class="line">  <span class="n">belongs_to</span> <span class="ss">:customer</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">to_liquid</span>
</span><span class="line">    <span class="no">CarMergeField</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># app/merge_fields/car_merge_field.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">CarMergeField</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Drop</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:car</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initalize</span><span class="p">(</span><span class="n">car</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@car</span> <span class="o">=</span> <span class="n">car</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">owner</span>
</span><span class="line">    <span class="n">car</span><span class="o">.</span><span class="n">customer</span><span class="o">.</span><span class="n">full_name</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">car_make</span>
</span><span class="line">    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">car</span><span class="o">.</span><span class="n">brand</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">car</span><span class="o">.</span><span class="n">model</span><span class="si">}</span><span class="s2"> MY </span><span class="si">#{</span><span class="n">car</span><span class="o">.</span><span class="n">manufacturer_year</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">dealer_contact_details</span>
</span><span class="line"><span class="o">&lt;&lt;-</span><span class="no">CONTACT</span>
</span><span class="line"><span class="sh">  Uber Dealer</span>
</span><span class="line">
</span><span class="line"><span class="sh">  9 Sesame St</span>
</span><span class="line"><span class="sh">  Emo Town</span>
</span><span class="line"><span class="no">CONTACT</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By moving all Liquid-related methods to a separate class, we leave Car model
clean and slim, well with a cost of one function, that is <code>Car#to_liquid</code>, but
I guess we could live with that for now.</p>

<p>But that&#8217;s the end of refactoring yet, we could see that <code>CarMergeField#dealer_contact_details</code>
should not belong to Car model and would be shared between many reports in the future.</p>

<p>So we create a new class for that:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">DealerMergeField</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Drop</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">contact_details</span>
</span><span class="line"><span class="o">&lt;&lt;-</span><span class="no">CONTACT</span>
</span><span class="line"><span class="sh">  Uber Dealer</span>
</span><span class="line">
</span><span class="line"><span class="sh">  9 Sesame St</span>
</span><span class="line"><span class="sh">  Emo Town</span>
</span><span class="line"><span class="no">CONTACT</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and make sure we also remove <code>CarMergeField#dealer_contact_details</code> and update our template:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># app/services/car_report_generation.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">CarReportGeneration</span> <span class="k">do</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">template</span>
</span><span class="line"><span class="o">&lt;&lt;-</span><span class="no">TEMPLATE</span>
</span><span class="line"><span class="sh">  Dear {{ car.owner }},</span>
</span><span class="line">
</span><span class="line"><span class="sh">  We&#39;ve performed inspection on your {{ car.car_make }} and found following issues:</span>
</span><span class="line">
</span><span class="line"><span class="sh">  {% for issue in car.issues %}</span>
</span><span class="line"><span class="sh">    * {{ issue.reference_number }} - {{ issue.description }}</span>
</span><span class="line"><span class="sh">  {% endfor %}</span>
</span><span class="line">
</span><span class="line"><span class="sh">  Please call us back for quotes</span>
</span><span class="line">
</span><span class="line"><span class="sh">  Sincerely yours</span>
</span><span class="line">
</span><span class="line"><span class="sh">  {{ dealer.contact_details }}</span>
</span><span class="line"><span class="no">TEMPLATE</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">generate_report</span>
</span><span class="line">    <span class="n">liquid_drops</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">      <span class="s1">&#39;car&#39;</span> <span class="o">=&gt;</span> <span class="vi">@car</span><span class="p">,</span>
</span><span class="line">      <span class="s1">&#39;dealer&#39;</span> <span class="o">=&gt;</span> <span class="no">DealerMergeField</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">template</span><span class="p">)</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">liquid_drops</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please pay attention closely to the <code>CarReportGeneration#generate_report</code>, you could
see that I parse in new liquid drop <code>dealer</code> which is an object of <code>DealerMergeField</code>.
FYI, the liquid does not have to tie to a model. We now could carry on and apply
the same technique for model CarIssue.</p>

<p>Yet, I am not satisfied, we could push abit further by extraction common liquid
rendering logic into its own class and encourage reusability of this class for
other reports.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># app/services/report_generation.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">ReportGeneration</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:report</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">report</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@report</span> <span class="o">=</span> <span class="n">report</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">generate_report</span>
</span><span class="line">    <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">report</span><span class="o">.</span><span class="n">template</span><span class="p">)</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">report</span><span class="o">.</span><span class="n">liquid_drops</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># app/reports/car_report.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">CarReport</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">car</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@car</span> <span class="o">=</span> <span class="n">car</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">template</span>
</span><span class="line"><span class="o">&lt;&lt;-</span><span class="no">TEMPLATE</span>
</span><span class="line"><span class="sh">  Dear {{ car.owner }},</span>
</span><span class="line">
</span><span class="line"><span class="sh">  We&#39;ve performed inspection on your {{ car.car_make }} and found following issues:</span>
</span><span class="line">
</span><span class="line"><span class="sh">  {% for issue in car.issues %}</span>
</span><span class="line"><span class="sh">    * {{ issue.reference_number }} - {{ issue.description }}</span>
</span><span class="line"><span class="sh">  {% endfor %}</span>
</span><span class="line">
</span><span class="line"><span class="sh">  Please call us back for quotes</span>
</span><span class="line">
</span><span class="line"><span class="sh">  Sincerely yours</span>
</span><span class="line">
</span><span class="line"><span class="sh">  {{ dealer.contact_details }}</span>
</span><span class="line"><span class="no">TEMPLATE</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">liquid_drops</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="s1">&#39;car&#39;</span> <span class="o">=&gt;</span> <span class="vi">@car</span><span class="p">,</span>
</span><span class="line">      <span class="s1">&#39;dealer&#39;</span> <span class="o">=&gt;</span> <span class="no">DealerMergeField</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and to use it we do:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">car_report</span> <span class="o">=</span> <span class="no">CarReport</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@car</span><span class="p">)</span>
</span><span class="line"><span class="no">ReportGeneration</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">car_report</span><span class="p">)</span><span class="o">.</span><span class="n">generate_report</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>Never let a gem manipulate you. If you see a gem makes you do bad things,
then you should dig deeper. Even writing new thing your own is not a bad
solution. If you don&#8217;t have time for that, make sure you write abstract
method that could help you untangle the coupling later.</p>

<p>I hope this is useful to some. I really welcome feedbacks.</p>

<p>Keep on learning folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to style kaminari pagination with Twitter Bootstrap 3]]></title>
    <link href="http://ruby-journal.com/how-to-style-kaminari-pagination-with-twitter-bootstrap-3/"/>
    <updated>2014-04-01T19:04:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-style-kaminari-pagination-with-twitter-bootstrap-3</id>
    <content type="html"><![CDATA[
<p>Kamiari is an awesome that would do all heavy-lifting work if you want to do pagination.
Yet Kaminari&#8217;s default layout does not fit well with Twitter Bootstrap pagination styling.
In this tutorial, I&#8217;ll show you how to make Kaminari play well with Bootstrap v3.</p>

<!--more-->

<p>First thing, assume we have <code>app/views/products/index.html.haml</code>, place the
Kaminari&#8217;s <code>paginate</code> call in this template:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haml"><span class="line">...
</span><span class="line"><span class="p">=</span> <span class="n">paginate</span> <span class="vi">@products</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By default, Kaminari will generate a list of <code>nav</code> wrapped under a div, which is
totally different to the <code>ul li</code> structures of Bootstrap pagination.</p>

<p>No problemo! we could tweak this. Now we need to tell bootstrap to generate template files:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haml"><span class="line">rails generate kaminari:views bootstrap
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>which create various fields under <code>app/views/kaminari</code>.</p>

<p>Next, we need to edit <code>app/views/kaminari/_paginator.html.haml</code> and replace the
content with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="haml"><span class="line"><span class="p">=</span> <span class="n">paginator</span><span class="o">.</span><span class="n">render</span> <span class="k">do</span>
</span><span class="line">  <span class="nt">%ul</span><span class="nc">.pagination.pagination-lg</span>
</span><span class="line">    <span class="p">=</span> <span class="n">first_page_tag</span> <span class="k">unless</span> <span class="n">current_page</span><span class="o">.</span><span class="n">first?</span>
</span><span class="line">    <span class="p">=</span> <span class="n">prev_page_tag</span> <span class="k">unless</span> <span class="n">current_page</span><span class="o">.</span><span class="n">first?</span>
</span><span class="line">    <span class="p">-</span> <span class="n">each_page</span> <span class="k">do</span> <span class="o">|</span><span class="n">page</span><span class="o">|</span>
</span><span class="line">      <span class="p">-</span> <span class="k">if</span> <span class="n">page</span><span class="o">.</span><span class="n">left_outer?</span> <span class="o">||</span> <span class="n">page</span><span class="o">.</span><span class="n">right_outer?</span> <span class="o">||</span> <span class="n">page</span><span class="o">.</span><span class="n">inside_window?</span>
</span><span class="line">        <span class="p">=</span> <span class="n">page_tag</span> <span class="n">page</span>
</span><span class="line">      <span class="p">-</span> <span class="k">elsif</span> <span class="o">!</span><span class="n">page</span><span class="o">.</span><span class="n">was_truncated?</span>
</span><span class="line">        <span class="p">=</span> <span class="n">gap_tag</span>
</span><span class="line">    <span class="p">=</span> <span class="n">next_page_tag</span> <span class="k">unless</span> <span class="n">current_page</span><span class="o">.</span><span class="n">last?</span>
</span><span class="line">    <span class="p">=</span> <span class="n">last_page_tag</span> <span class="k">unless</span> <span class="n">current_page</span><span class="o">.</span><span class="n">last?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What we did above is getting rid of <code>div.pagination</code> and adding class
<code>pagination</code> to <code>ul</code> tag</p>

<p>That&#8217;s it, now you have Twitter Bootstrap 3 pagination powered by Kaminari!</p>

<p>Keep on learning guys!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create dummy controller for testing with rspec-rails]]></title>
    <link href="http://ruby-journal.com/create-dummy-controller-for-testing-with-rspec-rails/"/>
    <updated>2014-03-24T09:21:00+11:00</updated>
    <id>http://ruby-journal.com/create-dummy-controller-for-testing-with-rspec-rails</id>
    <content type="html"><![CDATA[
<p>Today I learned a nitfy trick from Jon Rowe on how to to create anonymous controller
with rspec-rails for controller spec. This would aid testing action callbacks testing
in controller.</p>

<!--more-->

<p>Say you are testing <code>before_action :authenticate!</code> in your ApplicationController.</p>

<p>Here is my <code>ApplicationController</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">
</span><span class="line">  <span class="n">before_action</span> <span class="ss">:authenticate!</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, I want to test this callback. There are many ways to tackle this, I could create
a dummy controller like below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">DummyController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">dummy</span>
</span><span class="line">    <span class="n">render</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;Hello World&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># adding dummy routing dynamically - prepare for the hacky hacky!</span>
</span><span class="line"><span class="k">begin</span>
</span><span class="line">  <span class="n">_routes</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span>
</span><span class="line">  <span class="n">_routes</span><span class="o">.</span><span class="n">disable_clear_and_finalize</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line">  <span class="n">_routes</span><span class="o">.</span><span class="n">clear!</span>
</span><span class="line">  <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes_reloader</span><span class="o">.</span><span class="n">paths</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span> <span class="nb">load</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="n">_routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class="line">    <span class="n">get</span> <span class="s1">&#39;/dummy&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;dummy#dummy&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="no">ActiveSupport</span><span class="o">.</span><span class="n">on_load</span><span class="p">(</span><span class="ss">:action_controller</span><span class="p">)</span> <span class="p">{</span> <span class="n">_routes</span><span class="o">.</span><span class="n">finalize!</span> <span class="p">}</span>
</span><span class="line"><span class="k">ensure</span>
</span><span class="line">  <span class="n">_routes</span><span class="o">.</span><span class="n">disable_clear_and_finalize</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="no">ApplicationController</span> <span class="k">do</span>
</span><span class="line">  <span class="c1"># your test</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Oh gosh, that&#8217;s surely ugly! We could refactor all above with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">describe</span> <span class="no">ApplicationController</span> <span class="k">do</span>
</span><span class="line">  <span class="n">controller</span> <span class="k">do</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">dummy</span>
</span><span class="line">      <span class="n">render</span> <span class="ss">text</span><span class="p">:</span> <span class="s1">&#39;Hello world&#39;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">describe</span> <span class="s1">&#39;authenticate! action callback&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">it</span> <span class="s1">&#39;does redirect if user not sign in&#39;</span> <span class="k">do</span>
</span><span class="line">      <span class="c1"># ...</span>
</span><span class="line">      <span class="n">get</span> <span class="ss">:dummy</span>
</span><span class="line">
</span><span class="line">      <span class="c1"># ...</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Thanks to rspec-rails, we have the <code>controller</code> helper which creates
an anonymous controller (that inherits from ApplicationController).
It saves you many hacky lines and plus you don&#8217;t need to care about
routing.</p>

<p>See? You know know a powerful trick! So go on, try it! Keep on learning!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Genereate gems dependency graph with Bundler]]></title>
    <link href="http://ruby-journal.com/genereate-gems-dependency-graph-with-bundler/"/>
    <updated>2014-03-18T13:34:00+11:00</updated>
    <id>http://ruby-journal.com/genereate-gems-dependency-graph-with-bundler</id>
    <content type="html"><![CDATA[
<p>One of the features I like about RubyMine is the gems dependency graph.
This graps shows you all explicit/implicit dependencies of gems defined in
your Gemfile. In this short tutorial, I&#8217;ll show how to generate this graph
with Bundler.</p>

<!--more-->

<p>You&#8217;ll need graphviz installed first. On my Mac, I install it with Homebrew:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew install graphviz</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You could find packages for your flavor on the Internet if you are on Linux.</p>

<p>In order to generate graph, you need to change directory to the app folder
where the Gemfile file resides then use command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle viz
</span><span class="line"># Resolving dependencies...
</span><span class="line"># /app_path/gem_graph.png</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If there is no errors, you should see the image file path in the output.</p>

<p>Open it up and you&#8217;ll see something like this for a stock Rails 4 app:</p>

<p><img class="left" src="http://ruby-journal.com/images/2014-03-18-genereate-gems-dependency-graph-with-bundler/gem_graph.png" /></p>

<p>That&#8217;s it for today folks! Keep on learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to switch between selenium and poltergeist in capybara for Rails integration RSpec test]]></title>
    <link href="http://ruby-journal.com/how-to-switch-between-selenium-and-poltergeist-for-rails-integration-rsped-test/"/>
    <updated>2014-03-14T09:20:00+11:00</updated>
    <id>http://ruby-journal.com/how-to-switch-between-selenium-and-poltergeist-for-rails-integration-rsped-test</id>
    <content type="html"><![CDATA[
<p>Debugging integration is still a pain with headless driver like poltergeist. In this tutorial
I&#8217;ll show you a good tip how to switch to selenium for debugging with Firefox.</p>

<!--more-->

<p>Testing with selenium-webdriver is always slower than headless poltergeist, abeit easier to debug.
Debugging with selenium brings up Firefox browser window with CSS and JS correctly loaded whilst
it&#8217;s not the same case with poltergeist.</p>

<p>I am going to show you to have both of drivers in same Rails app and you could switch to selenium
for debugging easily!</p>

<p>First thing is to add into your <code>Gemfile</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;selenium-webdriver&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;poltergeist&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I want to point out that we explicitly set <code>reauire: false</code> so that capybara won&#8217;t load any driver.
This help avoid conflicts when two drivers are loaded at same time.</p>

<p>Please make sure you run &#8216;bundle install&#8217;  before moving to the next step.</p>

<p>Now I assume that you are using default RSpec&#8217;s helper <code>spec/spec_helper</code> for your integration test. Please ensure
that this line is in your file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;capybara/rspec&#39;</span>
</span><span class="line">
</span><span class="line"><span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;spec/support/**/*.rb&quot;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above line tells RSpec to pick up any extensions/helpers that we place under <code>spec/support</code> folder.</p>

<p>Next we create new <code>spec/support/feature_spec_extensions.rb</code> with content:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">FeatureSpecExtensions</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hang</span>
</span><span class="line">    <span class="nb">print</span> <span class="s2">&quot;Waiting.... Press return if you wanna continue&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FF&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span>
</span><span class="line">      <span class="no">STDIN</span><span class="o">.</span><span class="n">getc</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">debug</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="no">FeatureSpecExtensions</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:feature</span>
</span><span class="line">
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">before</span> <span class="ss">:suite</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:feature</span> <span class="k">do</span>
</span><span class="line">    <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FF&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span> <span class="c1"># in case you wanna run it with selenium</span>
</span><span class="line">      <span class="nb">require</span> <span class="s1">&#39;selenium-webdriver&#39;</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="nb">require</span> <span class="s1">&#39;capybara/poltergeist&#39;</span>
</span><span class="line">      <span class="no">Capybara</span><span class="o">.</span><span class="n">register_driver</span> <span class="ss">:poltergeist</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class="line">        <span class="ss">Capybara</span><span class="p">:</span><span class="ss">:Poltergeist</span><span class="o">::</span><span class="no">Driver</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">          <span class="n">js_errors</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class="line">          <span class="ss">inspector</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class="line">          <span class="n">phantomjs_options</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;--load-images=no&#39;</span><span class="p">,</span> <span class="s1">&#39;--ignore-ssl-errors=yes&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">          <span class="ss">timeout</span><span class="p">:</span> <span class="mi">120</span>
</span><span class="line">        <span class="p">})</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">before</span> <span class="ss">:each</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:feature</span> <span class="k">do</span>
</span><span class="line">    <span class="no">Capybara</span><span class="o">.</span><span class="n">current_driver</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FF&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span> <span class="p">?</span> <span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="p">:</span> <span class="ss">:poltergeist</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above RSpec helper sets default driver to poltergeist and should ENV variable FF is set, it will
switch to selenium-webdriver.</p>

<p>So to run a feature spec in poltergeist, we do:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rspec</span> <span class="n">spec</span><span class="o">/</span><span class="n">features</span><span class="o">/</span><span class="n">the_uber_spec</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and to test with selenium-webdriver, we do:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">FF</span><span class="o">=</span><span class="kp">true</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rspec</span> <span class="n">spec</span><span class="o">/</span><span class="n">features</span><span class="o">/</span><span class="n">the_uber_spec</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I also provide a helper method <code>hang</code> which will hang the page. Simply place it to the line
that you want and Firefox browser will open up if selenium is used. Eg:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">scenario</span> <span class="s1">&#39;some uber case&#39;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">click_on</span> <span class="s1">&#39;Sign In&#39;</span>
</span><span class="line">
</span><span class="line">  <span class="n">hang</span>
</span><span class="line">
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That&#8217;s it for now folks. Credits to Nikolai Nemshilov, my ex-colleague who came up with this brilliant hybrid idea.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed up your PostgreSQL dump restore]]></title>
    <link href="http://ruby-journal.com/speed-up-your-postgresql-dump-restore/"/>
    <updated>2014-03-11T16:20:00+11:00</updated>
    <id>http://ruby-journal.com/speed-up-your-postgresql-dump-restore</id>
    <content type="html"><![CDATA[
<p>Restore a DB dump with pg_restore is always a time-consuming process. However if
you are using Postgres 8.4 or newer, you could speed it up easily by having
multiple concurrent process do it for you.</p>

<!--more-->

<p>Version 8.4 introduced the <code>-j</code> or <code>--jobs</code> parameter for the pg_restore.</p>

<p>This speed up the restore process drastically on a multi-cores machine.</p>

<p>Here is how to use it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pg_restore [connection-options...] -j &lt;number_of_jobs&gt; [other-options...] [filename]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Says, you specify <code>-j 4</code>, this tells pg_restore to run 4 jobs. Each job
is one process or one thread depending on the OS and uses a separate
connection to the server.</p>

<p>So what is the optimal number? If you have to work this out by yourself,
a good start is number of core minus 2, and then try to bump the number up
while measuring the time taken to run. If the number is too high, it actually
slow down the process due to thrashing.</p>

<p>FYI, restoring a 500MB dump on 4 core with <code>-j 4</code> takes 6min instead of 17&#8217;.</p>

<p>One more important thing that I should mention is that, this feature only
works with custom and directory archive dump.</p>

<p>That&#8217;s it for today, folks. Keep on learning!</p>
]]></content>
  </entry>
  
</feed>
